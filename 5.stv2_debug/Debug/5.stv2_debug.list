
5.stv2_debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003158  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003218  08003218  00004218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080032d8  080032d8  000042d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032e0  080032e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032e0  080032e0  000042e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032e4  080032e4  000042e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  2000005c  08003344  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08003344  00005250  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f8e  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150d  00000000  00000000  0000d012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b8  00000000  00000000  0000e520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000524  00000000  00000000  0000ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012dcc  00000000  00000000  0000f0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089ff  00000000  00000000  00021ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075b7e  00000000  00000000  0002a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  000a0488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a2060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003200 	.word	0x08003200

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003200 	.word	0x08003200

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08b      	sub	sp, #44	@ 0x2c
 80004c0:	af00      	add	r7, sp, #0

	 uint8_t MSG[35] = {'\0'};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	3304      	adds	r3, #4
 80004ca:	221f      	movs	r2, #31
 80004cc:	2100      	movs	r1, #0
 80004ce:	0018      	movs	r0, r3
 80004d0:	f002 fa18 	bl	8002904 <memset>
	 uint8_t X = 0;
 80004d4:	2327      	movs	r3, #39	@ 0x27
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f9fe 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f822 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f886 	bl	80005f8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	   sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 80004ec:	2427      	movs	r4, #39	@ 0x27
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	781a      	ldrb	r2, [r3, #0]
 80004f2:	490b      	ldr	r1, [pc, #44]	@ (8000520 <main+0x64>)
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 f9e4 	bl	80028c4 <siprintf>
	       HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80004fc:	1d39      	adds	r1, r7, #4
 80004fe:	4809      	ldr	r0, [pc, #36]	@ (8000524 <main+0x68>)
 8000500:	2364      	movs	r3, #100	@ 0x64
 8000502:	2223      	movs	r2, #35	@ 0x23
 8000504:	f001 fc90 	bl	8001e28 <HAL_UART_Transmit>
	       HAL_Delay(500);
 8000508:	23fa      	movs	r3, #250	@ 0xfa
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fa55 	bl	80009bc <HAL_Delay>
	       X++;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	193b      	adds	r3, r7, r4
 8000518:	3201      	adds	r2, #1
 800051a:	701a      	strb	r2, [r3, #0]
  {
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7e5      	b.n	80004ec <main+0x30>
 8000520:	08003218 	.word	0x08003218
 8000524:	20000078 	.word	0x20000078

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b09d      	sub	sp, #116	@ 0x74
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	2438      	movs	r4, #56	@ 0x38
 8000530:	193b      	adds	r3, r7, r4
 8000532:	0018      	movs	r0, r3
 8000534:	2338      	movs	r3, #56	@ 0x38
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f002 f9e3 	bl	8002904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053e:	2324      	movs	r3, #36	@ 0x24
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	0018      	movs	r0, r3
 8000544:	2314      	movs	r3, #20
 8000546:	001a      	movs	r2, r3
 8000548:	2100      	movs	r1, #0
 800054a:	f002 f9db 	bl	8002904 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054e:	003b      	movs	r3, r7
 8000550:	0018      	movs	r0, r3
 8000552:	2324      	movs	r3, #36	@ 0x24
 8000554:	001a      	movs	r2, r3
 8000556:	2100      	movs	r1, #0
 8000558:	f002 f9d4 	bl	8002904 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <SystemClock_Config+0xc8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a24      	ldr	r2, [pc, #144]	@ (80005f4 <SystemClock_Config+0xcc>)
 8000562:	401a      	ands	r2, r3
 8000564:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <SystemClock_Config+0xc8>)
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	0109      	lsls	r1, r1, #4
 800056a:	430a      	orrs	r2, r1
 800056c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	0021      	movs	r1, r4
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2202      	movs	r2, #2
 8000574:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2201      	movs	r2, #1
 800057a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2210      	movs	r2, #16
 8000580:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	187b      	adds	r3, r7, r1
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fc82 	bl	8000e94 <HAL_RCC_OscConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000594:	f000 f8c4 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000598:	2124      	movs	r1, #36	@ 0x24
 800059a:	187b      	adds	r3, r7, r1
 800059c:	220f      	movs	r2, #15
 800059e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2201      	movs	r2, #1
 80005a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2100      	movs	r1, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f82d 	bl	800161c <HAL_RCC_ClockConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005c6:	f000 f8ab 	bl	8000720 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2202      	movs	r2, #2
 80005ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 fa43 	bl	8001a64 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	1e03      	subs	r3, r0, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005e2:	f000 f89d 	bl	8000720 <Error_Handler>
  }
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b01d      	add	sp, #116	@ 0x74
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	40007000 	.word	0x40007000
 80005f4:	ffffe7ff 	.word	0xffffe7ff

080005f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005fc:	4b14      	ldr	r3, [pc, #80]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 80005fe:	4a15      	ldr	r2, [pc, #84]	@ (8000654 <MX_USART2_UART_Init+0x5c>)
 8000600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000602:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <MX_USART2_UART_Init+0x58>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fb9f 	bl	8001d80 <HAL_UART_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000646:	f000 f86b 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000078 	.word	0x20000078
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	@ 0x24
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	240c      	movs	r4, #12
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f002 f94b 	bl	8002904 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000674:	2104      	movs	r1, #4
 8000676:	430a      	orrs	r2, r1
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_GPIO_Init+0xc0>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	430a      	orrs	r2, r1
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xc0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	4013      	ands	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xc0>)
 80006ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b6:	23a0      	movs	r3, #160	@ 0xa0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fbca 	bl	8000e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	0192      	lsls	r2, r2, #6
 80006ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2284      	movs	r2, #132	@ 0x84
 80006d0:	0392      	lsls	r2, r2, #14
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	4a0f      	ldr	r2, [pc, #60]	@ (800071c <MX_GPIO_Init+0xc4>)
 80006de:	0019      	movs	r1, r3
 80006e0:	0010      	movs	r0, r2
 80006e2:	f000 fa43 	bl	8000b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006e6:	0021      	movs	r1, r4
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2220      	movs	r2, #32
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000700:	187a      	adds	r2, r7, r1
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fa2f 	bl	8000b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b009      	add	sp, #36	@ 0x24
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40021000 	.word	0x40021000
 800071c:	50000800 	.word	0x50000800

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <HAL_MspInit+0x24>)
 8000732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_MspInit+0x24>)
 8000736:	2101      	movs	r1, #1
 8000738:	430a      	orrs	r2, r1
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <HAL_MspInit+0x24>)
 800073e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000740:	4b03      	ldr	r3, [pc, #12]	@ (8000750 <HAL_MspInit+0x24>)
 8000742:	2180      	movs	r1, #128	@ 0x80
 8000744:	0549      	lsls	r1, r1, #21
 8000746:	430a      	orrs	r2, r1
 8000748:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b089      	sub	sp, #36	@ 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	240c      	movs	r4, #12
 800075e:	193b      	adds	r3, r7, r4
 8000760:	0018      	movs	r0, r3
 8000762:	2314      	movs	r3, #20
 8000764:	001a      	movs	r2, r3
 8000766:	2100      	movs	r1, #0
 8000768:	f002 f8cc 	bl	8002904 <memset>
  if(huart->Instance==USART2)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <HAL_UART_MspInit+0x80>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d129      	bne.n	80007ca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <HAL_UART_MspInit+0x84>)
 8000778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <HAL_UART_MspInit+0x84>)
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	0289      	lsls	r1, r1, #10
 8000780:	430a      	orrs	r2, r1
 8000782:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <HAL_UART_MspInit+0x84>)
 8000786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <HAL_UART_MspInit+0x84>)
 800078a:	2101      	movs	r1, #1
 800078c:	430a      	orrs	r2, r1
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <HAL_UART_MspInit+0x84>)
 8000792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000794:	2201      	movs	r2, #1
 8000796:	4013      	ands	r3, r2
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800079c:	0021      	movs	r1, r4
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	220c      	movs	r2, #12
 80007a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2202      	movs	r2, #2
 80007a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2203      	movs	r2, #3
 80007b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2204      	movs	r2, #4
 80007ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	187a      	adds	r2, r7, r1
 80007be:	23a0      	movs	r3, #160	@ 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f9d1 	bl	8000b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b009      	add	sp, #36	@ 0x24
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40004400 	.word	0x40004400
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	e7fd      	b.n	80007e0 <NMI_Handler+0x4>

080007e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	e7fd      	b.n	80007e8 <HardFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f8be 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000818:	4a14      	ldr	r2, [pc, #80]	@ (800086c <_sbrk+0x5c>)
 800081a:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <_sbrk+0x60>)
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <_sbrk+0x64>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <_sbrk+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <_sbrk+0x64>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	429a      	cmp	r2, r3
 800083e:	d207      	bcs.n	8000850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000840:	f002 f868 	bl	8002914 <__errno>
 8000844:	0003      	movs	r3, r0
 8000846:	220c      	movs	r2, #12
 8000848:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084a:	2301      	movs	r3, #1
 800084c:	425b      	negs	r3, r3
 800084e:	e009      	b.n	8000864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000850:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	18d2      	adds	r2, r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <_sbrk+0x64>)
 8000860:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b006      	add	sp, #24
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20002000 	.word	0x20002000
 8000870:	00000400 	.word	0x00000400
 8000874:	20000100 	.word	0x20000100
 8000878:	20000250 	.word	0x20000250

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fff6 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 f833 	bl	8002920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fdff 	bl	80004bc <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008cc:	080032e8 	.word	0x080032e8
  ldr r2, =_sbss
 80008d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008d4:	20000250 	.word	0x20000250

080008d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_COMP_IRQHandler>
	...

080008dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_Init+0x3c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_Init+0x3c>)
 80008ee:	2140      	movs	r1, #64	@ 0x40
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f811 	bl	800091c <HAL_InitTick>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d003      	beq.n	8000906 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e001      	b.n	800090a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000906:	f7ff ff11 	bl	800072c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_InitTick+0x5c>)
 8000926:	681c      	ldr	r4, [r3, #0]
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_InitTick+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	0019      	movs	r1, r3
 800092e:	23fa      	movs	r3, #250	@ 0xfa
 8000930:	0098      	lsls	r0, r3, #2
 8000932:	f7ff fbf3 	bl	800011c <__udivsi3>
 8000936:	0003      	movs	r3, r0
 8000938:	0019      	movs	r1, r3
 800093a:	0020      	movs	r0, r4
 800093c:	f7ff fbee 	bl	800011c <__udivsi3>
 8000940:	0003      	movs	r3, r0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 f905 	bl	8000b52 <HAL_SYSTICK_Config>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e00f      	b.n	8000970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80b      	bhi.n	800096e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f8e2 	bl	8000b28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_InitTick+0x64>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	18d2      	adds	r2, r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_IncTick+0x20>)
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000104 	.word	0x20000104

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	20000104 	.word	0x20000104

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001a      	movs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	0002      	movs	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a18:	d828      	bhi.n	8000a6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	33c0      	adds	r3, #192	@ 0xc0
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	589b      	ldr	r3, [r3, r2]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	@ 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	@ 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <__NVIC_SetPriority+0xd4>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	430a      	orrs	r2, r1
 8000a64:	33c0      	adds	r3, #192	@ 0xc0
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a6a:	e031      	b.n	8000ad0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000adc <__NVIC_SetPriority+0xd8>)
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0019      	movs	r1, r3
 8000a74:	230f      	movs	r3, #15
 8000a76:	400b      	ands	r3, r1
 8000a78:	3b08      	subs	r3, #8
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	3304      	adds	r3, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1dfa      	adds	r2, r7, #7
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	400a      	ands	r2, r1
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	21ff      	movs	r1, #255	@ 0xff
 8000a94:	4091      	lsls	r1, r2
 8000a96:	000a      	movs	r2, r1
 8000a98:	43d2      	mvns	r2, r2
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	019b      	lsls	r3, r3, #6
 8000aa2:	22ff      	movs	r2, #255	@ 0xff
 8000aa4:	401a      	ands	r2, r3
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2303      	movs	r3, #3
 8000aae:	4003      	ands	r3, r0
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	4809      	ldr	r0, [pc, #36]	@ (8000adc <__NVIC_SetPriority+0xd8>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	001c      	movs	r4, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	4023      	ands	r3, r4
 8000ac0:	3b08      	subs	r3, #8
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	3306      	adds	r3, #6
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	18c3      	adds	r3, r0, r3
 8000acc:	3304      	adds	r3, #4
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	045b      	lsls	r3, r3, #17
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d301      	bcc.n	8000af8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af4:	2301      	movs	r3, #1
 8000af6:	e010      	b.n	8000b1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <SysTick_Config+0x44>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	3a01      	subs	r2, #1
 8000afe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b00:	2301      	movs	r3, #1
 8000b02:	425b      	negs	r3, r3
 8000b04:	2103      	movs	r1, #3
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff ff7c 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <SysTick_Config+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <SysTick_Config+0x44>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	210f      	movs	r1, #15
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	1c02      	adds	r2, r0, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff5d 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b004      	add	sp, #16
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffbf 	bl	8000ae0 <SysTick_Config>
 8000b62:	0003      	movs	r3, r0
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b82:	e14f      	b.n	8000e24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2101      	movs	r1, #1
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4091      	lsls	r1, r2
 8000b8e:	000a      	movs	r2, r1
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <HAL_GPIO_Init+0x30>
 8000b9a:	e140      	b.n	8000e1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d005      	beq.n	8000bb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2203      	movs	r2, #3
 8000bae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d130      	bne.n	8000c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	409a      	lsls	r2, r3
 8000bc2:	0013      	movs	r3, r2
 8000bc4:	43da      	mvns	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68da      	ldr	r2, [r3, #12]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bea:	2201      	movs	r2, #1
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	091b      	lsrs	r3, r3, #4
 8000c00:	2201      	movs	r2, #1
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	2b03      	cmp	r3, #3
 8000c20:	d017      	beq.n	8000c52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	0013      	movs	r3, r2
 8000c32:	43da      	mvns	r2, r3
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d123      	bne.n	8000ca6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	0092      	lsls	r2, r2, #2
 8000c68:	58d3      	ldr	r3, [r2, r3]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2207      	movs	r2, #7
 8000c70:	4013      	ands	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	220f      	movs	r2, #15
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2107      	movs	r1, #7
 8000c8a:	400b      	ands	r3, r1
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	409a      	lsls	r2, r3
 8000c90:	0013      	movs	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	6939      	ldr	r1, [r7, #16]
 8000ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	23c0      	movs	r3, #192	@ 0xc0
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d100      	bne.n	8000ce8 <HAL_GPIO_Init+0x17c>
 8000ce6:	e09a      	b.n	8000e1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce8:	4b54      	ldr	r3, [pc, #336]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cec:	4b53      	ldr	r3, [pc, #332]	@ (8000e3c <HAL_GPIO_Init+0x2d0>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf4:	4a52      	ldr	r2, [pc, #328]	@ (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	589b      	ldr	r3, [r3, r2]
 8000d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	0013      	movs	r3, r2
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	23a0      	movs	r3, #160	@ 0xa0
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0x1ea>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a47      	ldr	r2, [pc, #284]	@ (8000e44 <HAL_GPIO_Init+0x2d8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0x1e6>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a46      	ldr	r2, [pc, #280]	@ (8000e48 <HAL_GPIO_Init+0x2dc>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00d      	beq.n	8000d4e <HAL_GPIO_Init+0x1e2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a45      	ldr	r2, [pc, #276]	@ (8000e4c <HAL_GPIO_Init+0x2e0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x1de>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a44      	ldr	r2, [pc, #272]	@ (8000e50 <HAL_GPIO_Init+0x2e4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_GPIO_Init+0x1da>
 8000d42:	2305      	movs	r3, #5
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d46:	2306      	movs	r3, #6
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x1ec>
 8000d56:	2300      	movs	r3, #0
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	400a      	ands	r2, r1
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d68:	4935      	ldr	r1, [pc, #212]	@ (8000e40 <HAL_GPIO_Init+0x2d4>)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d76:	4b37      	ldr	r3, [pc, #220]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	2380      	movs	r3, #128	@ 0x80
 8000d8c:	035b      	lsls	r3, r3, #13
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000da0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43da      	mvns	r2, r3
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	039b      	lsls	r3, r3, #14
 8000db8:	4013      	ands	r3, r2
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dca:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	025b      	lsls	r3, r3, #9
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e18:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <HAL_GPIO_Init+0x2e8>)
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	40da      	lsrs	r2, r3
 8000e2c:	1e13      	subs	r3, r2, #0
 8000e2e:	d000      	beq.n	8000e32 <HAL_GPIO_Init+0x2c6>
 8000e30:	e6a8      	b.n	8000b84 <HAL_GPIO_Init+0x18>
  }
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	50000400 	.word	0x50000400
 8000e48:	50000800 	.word	0x50000800
 8000e4c:	50000c00 	.word	0x50000c00
 8000e50:	50001c00 	.word	0x50001c00
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	0008      	movs	r0, r1
 8000e62:	0011      	movs	r1, r2
 8000e64:	1cbb      	adds	r3, r7, #2
 8000e66:	1c02      	adds	r2, r0, #0
 8000e68:	801a      	strh	r2, [r3, #0]
 8000e6a:	1c7b      	adds	r3, r7, #1
 8000e6c:	1c0a      	adds	r2, r1, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e70:	1c7b      	adds	r3, r7, #1
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d004      	beq.n	8000e82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e78:	1cbb      	adds	r3, r7, #2
 8000e7a:	881a      	ldrh	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e80:	e003      	b.n	8000e8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e82:	1cbb      	adds	r3, r7, #2
 8000e84:	881a      	ldrh	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e94:	b5b0      	push	{r4, r5, r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d102      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f000 fbaf 	bl	8001606 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ea8:	4bcf      	ldr	r3, [pc, #828]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	220c      	movs	r2, #12
 8000eae:	4013      	ands	r3, r2
 8000eb0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eb2:	4bcd      	ldr	r3, [pc, #820]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d100      	bne.n	8000eca <HAL_RCC_OscConfig+0x36>
 8000ec8:	e07e      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d007      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	d112      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	2380      	movs	r3, #128	@ 0x80
 8000eda:	025b      	lsls	r3, r3, #9
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10d      	bne.n	8000efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	4bc1      	ldr	r3, [pc, #772]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	029b      	lsls	r3, r3, #10
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x5a>
 8000eec:	e06b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x132>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d167      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f000 fb85 	bl	8001606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d107      	bne.n	8000f18 <HAL_RCC_OscConfig+0x84>
 8000f08:	4bb7      	ldr	r3, [pc, #732]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4bb6      	ldr	r3, [pc, #728]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e027      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	23a0      	movs	r3, #160	@ 0xa0
 8000f1e:	02db      	lsls	r3, r3, #11
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d10e      	bne.n	8000f42 <HAL_RCC_OscConfig+0xae>
 8000f24:	4bb0      	ldr	r3, [pc, #704]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4baf      	ldr	r3, [pc, #700]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	02c9      	lsls	r1, r1, #11
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	4bad      	ldr	r3, [pc, #692]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4bac      	ldr	r3, [pc, #688]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f38:	2180      	movs	r1, #128	@ 0x80
 8000f3a:	0249      	lsls	r1, r1, #9
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e012      	b.n	8000f68 <HAL_RCC_OscConfig+0xd4>
 8000f42:	4ba9      	ldr	r3, [pc, #676]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba8      	ldr	r3, [pc, #672]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f48:	49a8      	ldr	r1, [pc, #672]	@ (80011ec <HAL_RCC_OscConfig+0x358>)
 8000f4a:	400a      	ands	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	025b      	lsls	r3, r3, #9
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4ba2      	ldr	r3, [pc, #648]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4ba1      	ldr	r3, [pc, #644]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f62:	49a3      	ldr	r1, [pc, #652]	@ (80011f0 <HAL_RCC_OscConfig+0x35c>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d015      	beq.n	8000f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fd1a 	bl	80009a8 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f78:	e009      	b.n	8000f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fd15 	bl	80009a8 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b64      	cmp	r3, #100	@ 0x64
 8000f86:	d902      	bls.n	8000f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 fb3c 	bl	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f8e:	4b96      	ldr	r3, [pc, #600]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	029b      	lsls	r3, r3, #10
 8000f96:	4013      	ands	r3, r2
 8000f98:	d0ef      	beq.n	8000f7a <HAL_RCC_OscConfig+0xe6>
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd04 	bl	80009a8 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa4:	e008      	b.n	8000fb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fcff 	bl	80009a8 <HAL_GetTick>
 8000faa:	0002      	movs	r2, r0
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	2b64      	cmp	r3, #100	@ 0x64
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e326      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2380      	movs	r3, #128	@ 0x80
 8000fbe:	029b      	lsls	r3, r3, #10
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d1f0      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x112>
 8000fc4:	e000      	b.n	8000fc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d100      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x140>
 8000fd2:	e08b      	b.n	80010ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fda:	6a3b      	ldr	r3, [r7, #32]
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d005      	beq.n	8000fec <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d13e      	bne.n	8001064 <HAL_RCC_OscConfig+0x1d0>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d13b      	bne.n	8001064 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fec:	4b7e      	ldr	r3, [pc, #504]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d004      	beq.n	8001000 <HAL_RCC_OscConfig+0x16c>
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e302      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001000:	4b79      	ldr	r3, [pc, #484]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	4a7b      	ldr	r2, [pc, #492]	@ (80011f4 <HAL_RCC_OscConfig+0x360>)
 8001006:	4013      	ands	r3, r2
 8001008:	0019      	movs	r1, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	021a      	lsls	r2, r3, #8
 8001010:	4b75      	ldr	r3, [pc, #468]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001012:	430a      	orrs	r2, r1
 8001014:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001016:	4b74      	ldr	r3, [pc, #464]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2209      	movs	r2, #9
 800101c:	4393      	bics	r3, r2
 800101e:	0019      	movs	r1, r3
 8001020:	4b71      	ldr	r3, [pc, #452]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	430a      	orrs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001028:	f000 fc40 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800102c:	0001      	movs	r1, r0
 800102e:	4b6e      	ldr	r3, [pc, #440]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	220f      	movs	r2, #15
 8001036:	4013      	ands	r3, r2
 8001038:	4a6f      	ldr	r2, [pc, #444]	@ (80011f8 <HAL_RCC_OscConfig+0x364>)
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	000a      	movs	r2, r1
 800103e:	40da      	lsrs	r2, r3
 8001040:	4b6e      	ldr	r3, [pc, #440]	@ (80011fc <HAL_RCC_OscConfig+0x368>)
 8001042:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001044:	4b6e      	ldr	r3, [pc, #440]	@ (8001200 <HAL_RCC_OscConfig+0x36c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2513      	movs	r5, #19
 800104a:	197c      	adds	r4, r7, r5
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fc65 	bl	800091c <HAL_InitTick>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001056:	197b      	adds	r3, r7, r5
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d046      	beq.n	80010ec <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800105e:	197b      	adds	r3, r7, r5
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	e2d0      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d027      	beq.n	80010ba <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800106a:	4b5f      	ldr	r3, [pc, #380]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2209      	movs	r2, #9
 8001070:	4393      	bics	r3, r2
 8001072:	0019      	movs	r1, r3
 8001074:	4b5c      	ldr	r3, [pc, #368]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	430a      	orrs	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fc94 	bl	80009a8 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc8f 	bl	80009a8 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e2b6      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001098:	4b53      	ldr	r3, [pc, #332]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d0f1      	beq.n	8001086 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b51      	ldr	r3, [pc, #324]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4a53      	ldr	r2, [pc, #332]	@ (80011f4 <HAL_RCC_OscConfig+0x360>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	0019      	movs	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	021a      	lsls	r2, r3, #8
 80010b2:	4b4d      	ldr	r3, [pc, #308]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	e018      	b.n	80010ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b4b      	ldr	r3, [pc, #300]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010c0:	2101      	movs	r1, #1
 80010c2:	438a      	bics	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc6f 	bl	80009a8 <HAL_GetTick>
 80010ca:	0003      	movs	r3, r0
 80010cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc6a 	bl	80009a8 <HAL_GetTick>
 80010d4:	0002      	movs	r2, r0
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e291      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010e2:	4b41      	ldr	r3, [pc, #260]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d1f1      	bne.n	80010d0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2210      	movs	r2, #16
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_OscConfig+0x264>
 80010f6:	e0a1      	b.n	800123c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d140      	bne.n	8001180 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010fe:	4b3a      	ldr	r3, [pc, #232]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d005      	beq.n	8001116 <HAL_RCC_OscConfig+0x282>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e277      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a3a      	ldr	r2, [pc, #232]	@ (8001204 <HAL_RCC_OscConfig+0x370>)
 800111c:	4013      	ands	r3, r2
 800111e:	0019      	movs	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	0a19      	lsrs	r1, r3, #8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	061a      	lsls	r2, r3, #24
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800113a:	430a      	orrs	r2, r1
 800113c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001142:	0b5b      	lsrs	r3, r3, #13
 8001144:	3301      	adds	r3, #1
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	0212      	lsls	r2, r2, #8
 800114a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	091b      	lsrs	r3, r3, #4
 8001152:	210f      	movs	r1, #15
 8001154:	400b      	ands	r3, r1
 8001156:	4928      	ldr	r1, [pc, #160]	@ (80011f8 <HAL_RCC_OscConfig+0x364>)
 8001158:	5ccb      	ldrb	r3, [r1, r3]
 800115a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800115c:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_RCC_OscConfig+0x368>)
 800115e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HAL_RCC_OscConfig+0x36c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2513      	movs	r5, #19
 8001166:	197c      	adds	r4, r7, r5
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fbd7 	bl	800091c <HAL_InitTick>
 800116e:	0003      	movs	r3, r0
 8001170:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001172:	197b      	adds	r3, r7, r5
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d060      	beq.n	800123c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800117a:	197b      	adds	r3, r7, r5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	e242      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d03f      	beq.n	8001208 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001188:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b16      	ldr	r3, [pc, #88]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 800118e:	2180      	movs	r1, #128	@ 0x80
 8001190:	0049      	lsls	r1, r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001196:	f7ff fc07 	bl	80009a8 <HAL_GetTick>
 800119a:	0003      	movs	r3, r0
 800119c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc02 	bl	80009a8 <HAL_GetTick>
 80011a4:	0002      	movs	r2, r0
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e229      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	@ 0x80
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011be:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <HAL_RCC_OscConfig+0x370>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	0019      	movs	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011ce:	430a      	orrs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	0a19      	lsrs	r1, r3, #8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	061a      	lsls	r2, r3, #24
 80011e0:	4b01      	ldr	r3, [pc, #4]	@ (80011e8 <HAL_RCC_OscConfig+0x354>)
 80011e2:	430a      	orrs	r2, r1
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	e029      	b.n	800123c <HAL_RCC_OscConfig+0x3a8>
 80011e8:	40021000 	.word	0x40021000
 80011ec:	fffeffff 	.word	0xfffeffff
 80011f0:	fffbffff 	.word	0xfffbffff
 80011f4:	ffffe0ff 	.word	0xffffe0ff
 80011f8:	08003238 	.word	0x08003238
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004
 8001204:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001208:	4bbd      	ldr	r3, [pc, #756]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4bbc      	ldr	r3, [pc, #752]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800120e:	49bd      	ldr	r1, [pc, #756]	@ (8001504 <HAL_RCC_OscConfig+0x670>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fbc8 	bl	80009a8 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121e:	f7ff fbc3 	bl	80009a8 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1ea      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001230:	4bb3      	ldr	r3, [pc, #716]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2208      	movs	r2, #8
 8001242:	4013      	ands	r3, r2
 8001244:	d036      	beq.n	80012b4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d019      	beq.n	8001282 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4bac      	ldr	r3, [pc, #688]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001252:	4bab      	ldr	r3, [pc, #684]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001254:	2101      	movs	r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fba5 	bl	80009a8 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fba0 	bl	80009a8 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1c7      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001276:	4ba2      	ldr	r3, [pc, #648]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d0f1      	beq.n	8001264 <HAL_RCC_OscConfig+0x3d0>
 8001280:	e018      	b.n	80012b4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	4b9f      	ldr	r3, [pc, #636]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001286:	4b9e      	ldr	r3, [pc, #632]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001288:	2101      	movs	r1, #1
 800128a:	438a      	bics	r2, r1
 800128c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb8b 	bl	80009a8 <HAL_GetTick>
 8001292:	0003      	movs	r3, r0
 8001294:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fb86 	bl	80009a8 <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e1ad      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012aa:	4b95      	ldr	r3, [pc, #596]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d1f1      	bne.n	8001298 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2204      	movs	r2, #4
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x42c>
 80012be:	e0ae      	b.n	800141e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c0:	2027      	movs	r0, #39	@ 0x27
 80012c2:	183b      	adds	r3, r7, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	055b      	lsls	r3, r3, #21
 80012d0:	4013      	ands	r3, r2
 80012d2:	d109      	bne.n	80012e8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012d8:	4b89      	ldr	r3, [pc, #548]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	0549      	lsls	r1, r1, #21
 80012de:	430a      	orrs	r2, r1
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b87      	ldr	r3, [pc, #540]	@ (8001508 <HAL_RCC_OscConfig+0x674>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	@ 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d11a      	bne.n	800132a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f4:	4b84      	ldr	r3, [pc, #528]	@ (8001508 <HAL_RCC_OscConfig+0x674>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b83      	ldr	r3, [pc, #524]	@ (8001508 <HAL_RCC_OscConfig+0x674>)
 80012fa:	2180      	movs	r1, #128	@ 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7ff fb51 	bl	80009a8 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff fb4c 	bl	80009a8 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	@ 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e173      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b7a      	ldr	r3, [pc, #488]	@ (8001508 <HAL_RCC_OscConfig+0x674>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	429a      	cmp	r2, r3
 8001334:	d107      	bne.n	8001346 <HAL_RCC_OscConfig+0x4b2>
 8001336:	4b72      	ldr	r3, [pc, #456]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800133a:	4b71      	ldr	r3, [pc, #452]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	0049      	lsls	r1, r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	651a      	str	r2, [r3, #80]	@ 0x50
 8001344:	e031      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d4>
 800134e:	4b6c      	ldr	r3, [pc, #432]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001352:	4b6b      	ldr	r3, [pc, #428]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001354:	496b      	ldr	r1, [pc, #428]	@ (8001504 <HAL_RCC_OscConfig+0x670>)
 8001356:	400a      	ands	r2, r1
 8001358:	651a      	str	r2, [r3, #80]	@ 0x50
 800135a:	4b69      	ldr	r3, [pc, #420]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800135e:	4b68      	ldr	r3, [pc, #416]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001360:	496a      	ldr	r1, [pc, #424]	@ (800150c <HAL_RCC_OscConfig+0x678>)
 8001362:	400a      	ands	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	@ 0x50
 8001366:	e020      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	23a0      	movs	r3, #160	@ 0xa0
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	429a      	cmp	r2, r3
 8001372:	d10e      	bne.n	8001392 <HAL_RCC_OscConfig+0x4fe>
 8001374:	4b62      	ldr	r3, [pc, #392]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001378:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	00c9      	lsls	r1, r1, #3
 800137e:	430a      	orrs	r2, r1
 8001380:	651a      	str	r2, [r3, #80]	@ 0x50
 8001382:	4b5f      	ldr	r3, [pc, #380]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001384:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001386:	4b5e      	ldr	r3, [pc, #376]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0049      	lsls	r1, r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x516>
 8001392:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001396:	4b5a      	ldr	r3, [pc, #360]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001398:	495a      	ldr	r1, [pc, #360]	@ (8001504 <HAL_RCC_OscConfig+0x670>)
 800139a:	400a      	ands	r2, r1
 800139c:	651a      	str	r2, [r3, #80]	@ 0x50
 800139e:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013a2:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013a4:	4959      	ldr	r1, [pc, #356]	@ (800150c <HAL_RCC_OscConfig+0x678>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff faf9 	bl	80009a8 <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ba:	e009      	b.n	80013d0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff faf4 	bl	80009a8 <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	4a52      	ldr	r2, [pc, #328]	@ (8001510 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e11a      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0ef      	beq.n	80013bc <HAL_RCC_OscConfig+0x528>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fae3 	bl	80009a8 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7ff fade 	bl	80009a8 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a47      	ldr	r2, [pc, #284]	@ (8001510 <HAL_RCC_OscConfig+0x67c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e104      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013fc:	4b40      	ldr	r3, [pc, #256]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80013fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d1ef      	bne.n	80013e8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001408:	2327      	movs	r3, #39	@ 0x27
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001416:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001418:	493e      	ldr	r1, [pc, #248]	@ (8001514 <HAL_RCC_OscConfig+0x680>)
 800141a:	400a      	ands	r2, r1
 800141c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2220      	movs	r2, #32
 8001424:	4013      	ands	r3, r2
 8001426:	d049      	beq.n	80014bc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d026      	beq.n	800147e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001430:	4b33      	ldr	r3, [pc, #204]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	4b32      	ldr	r3, [pc, #200]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 800143e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001440:	4b2f      	ldr	r3, [pc, #188]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	635a      	str	r2, [r3, #52]	@ 0x34
 8001448:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <HAL_RCC_OscConfig+0x684>)
 800144a:	6a1a      	ldr	r2, [r3, #32]
 800144c:	4b32      	ldr	r3, [pc, #200]	@ (8001518 <HAL_RCC_OscConfig+0x684>)
 800144e:	2180      	movs	r1, #128	@ 0x80
 8001450:	0189      	lsls	r1, r1, #6
 8001452:	430a      	orrs	r2, r1
 8001454:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff faa7 	bl	80009a8 <HAL_GetTick>
 800145a:	0003      	movs	r3, r0
 800145c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001460:	f7ff faa2 	bl	80009a8 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0c9      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001472:	4b23      	ldr	r3, [pc, #140]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d0f1      	beq.n	8001460 <HAL_RCC_OscConfig+0x5cc>
 800147c:	e01e      	b.n	80014bc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 8001484:	2101      	movs	r1, #1
 8001486:	438a      	bics	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <HAL_RCC_OscConfig+0x684>)
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <HAL_RCC_OscConfig+0x684>)
 8001490:	4922      	ldr	r1, [pc, #136]	@ (800151c <HAL_RCC_OscConfig+0x688>)
 8001492:	400a      	ands	r2, r1
 8001494:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fa87 	bl	80009a8 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a0:	f7ff fa82 	bl	80009a8 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e0a9      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d1f1      	bne.n	80014a0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x632>
 80014c4:	e09e      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x63a>
 80014cc:	e077      	b.n	80015be <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d158      	bne.n	8001588 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	4910      	ldr	r1, [pc, #64]	@ (8001520 <HAL_RCC_OscConfig+0x68c>)
 80014de:	400a      	ands	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fa61 	bl	80009a8 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ec:	f7ff fa5c 	bl	80009a8 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d914      	bls.n	8001524 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e083      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	40021000 	.word	0x40021000
 8001504:	fffffeff 	.word	0xfffffeff
 8001508:	40007000 	.word	0x40007000
 800150c:	fffffbff 	.word	0xfffffbff
 8001510:	00001388 	.word	0x00001388
 8001514:	efffffff 	.word	0xefffffff
 8001518:	40010000 	.word	0x40010000
 800151c:	ffffdfff 	.word	0xffffdfff
 8001520:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	@ 0x80
 800152a:	049b      	lsls	r3, r3, #18
 800152c:	4013      	ands	r3, r2
 800152e:	d1dd      	bne.n	80014ec <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001530:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a37      	ldr	r2, [pc, #220]	@ (8001614 <HAL_RCC_OscConfig+0x780>)
 8001536:	4013      	ands	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001548:	431a      	orrs	r2, r3
 800154a:	4b31      	ldr	r3, [pc, #196]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001550:	4b2f      	ldr	r3, [pc, #188]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	0449      	lsls	r1, r1, #17
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fa23 	bl	80009a8 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fa1e 	bl	80009a8 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e045      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800157a:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	049b      	lsls	r3, r3, #18
 8001582:	4013      	ands	r3, r2
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x6d4>
 8001586:	e03d      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b21      	ldr	r3, [pc, #132]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 800158e:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_RCC_OscConfig+0x784>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fa08 	bl	80009a8 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff fa03 	bl	80009a8 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e02a      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b0:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	049b      	lsls	r3, r3, #18
 80015b8:	4013      	ands	r3, r2
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x70a>
 80015bc:	e022      	b.n	8001604 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e01d      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_RCC_OscConfig+0x77c>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	2380      	movs	r3, #128	@ 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	401a      	ands	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10f      	bne.n	8001600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	23f0      	movs	r3, #240	@ 0xf0
 80015e4:	039b      	lsls	r3, r3, #14
 80015e6:	401a      	ands	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	23c0      	movs	r3, #192	@ 0xc0
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	401a      	ands	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	0018      	movs	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	b00a      	add	sp, #40	@ 0x28
 800160c:	bdb0      	pop	{r4, r5, r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	40021000 	.word	0x40021000
 8001614:	ff02ffff 	.word	0xff02ffff
 8001618:	feffffff 	.word	0xfeffffff

0800161c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e128      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b96      	ldr	r3, [pc, #600]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d91e      	bls.n	800167c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b93      	ldr	r3, [pc, #588]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2201      	movs	r2, #1
 8001644:	4393      	bics	r3, r2
 8001646:	0019      	movs	r1, r3
 8001648:	4b90      	ldr	r3, [pc, #576]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001650:	f7ff f9aa 	bl	80009a8 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001658:	e009      	b.n	800166e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800165a:	f7ff f9a5 	bl	80009a8 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4a8a      	ldr	r2, [pc, #552]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e109      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b87      	ldr	r3, [pc, #540]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2201      	movs	r2, #1
 8001674:	4013      	ands	r3, r2
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d009      	beq.n	800169a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001686:	4b83      	ldr	r3, [pc, #524]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	22f0      	movs	r2, #240	@ 0xf0
 800168c:	4393      	bics	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	4b7f      	ldr	r3, [pc, #508]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001696:	430a      	orrs	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
 80016a2:	d100      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x8a>
 80016a4:	e089      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d107      	bne.n	80016be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016ae:	4b79      	ldr	r3, [pc, #484]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	029b      	lsls	r3, r3, #10
 80016b6:	4013      	ands	r3, r2
 80016b8:	d120      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0e1      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c6:	4b73      	ldr	r3, [pc, #460]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	049b      	lsls	r3, r3, #18
 80016ce:	4013      	ands	r3, r2
 80016d0:	d114      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e0d5      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016de:	4b6d      	ldr	r3, [pc, #436]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d109      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0ca      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ec:	4b69      	ldr	r3, [pc, #420]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4013      	ands	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0c2      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fc:	4b65      	ldr	r3, [pc, #404]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2203      	movs	r2, #3
 8001702:	4393      	bics	r3, r2
 8001704:	0019      	movs	r1, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	4b62      	ldr	r3, [pc, #392]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 800170c:	430a      	orrs	r2, r1
 800170e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff f94a 	bl	80009a8 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d111      	bne.n	8001744 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	e009      	b.n	8001736 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f941 	bl	80009a8 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0a5      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001736:	4b57      	ldr	r3, [pc, #348]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	220c      	movs	r2, #12
 800173c:	4013      	ands	r3, r2
 800173e:	2b08      	cmp	r3, #8
 8001740:	d1ef      	bne.n	8001722 <HAL_RCC_ClockConfig+0x106>
 8001742:	e03a      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d111      	bne.n	8001770 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174c:	e009      	b.n	8001762 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174e:	f7ff f92b 	bl	80009a8 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a4d      	ldr	r2, [pc, #308]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e08f      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001762:	4b4c      	ldr	r3, [pc, #304]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	220c      	movs	r2, #12
 8001768:	4013      	ands	r3, r2
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d1ef      	bne.n	800174e <HAL_RCC_ClockConfig+0x132>
 800176e:	e024      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d11b      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001778:	e009      	b.n	800178e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7ff f915 	bl	80009a8 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	4a42      	ldr	r2, [pc, #264]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e079      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800178e:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	220c      	movs	r2, #12
 8001794:	4013      	ands	r3, r2
 8001796:	2b04      	cmp	r3, #4
 8001798:	d1ef      	bne.n	800177a <HAL_RCC_ClockConfig+0x15e>
 800179a:	e00e      	b.n	80017ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff f904 	bl	80009a8 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e068      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017b0:	4b38      	ldr	r3, [pc, #224]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	220c      	movs	r2, #12
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ba:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d21e      	bcs.n	8001806 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2201      	movs	r2, #1
 80017ce:	4393      	bics	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017da:	f7ff f8e5 	bl	80009a8 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	e009      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff f8e0 	bl	80009a8 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a28      	ldr	r2, [pc, #160]	@ (8001890 <HAL_RCC_ClockConfig+0x274>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e044      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_ClockConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	4a20      	ldr	r2, [pc, #128]	@ (8001898 <HAL_RCC_ClockConfig+0x27c>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	4013      	ands	r3, r2
 800182c:	d00a      	beq.n	8001844 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <HAL_RCC_ClockConfig+0x280>)
 8001834:	4013      	ands	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	00da      	lsls	r2, r3, #3
 800183e:	4b15      	ldr	r3, [pc, #84]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 8001840:	430a      	orrs	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001844:	f000 f832 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001848:	0001      	movs	r1, r0
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_RCC_ClockConfig+0x278>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	220f      	movs	r2, #15
 8001852:	4013      	ands	r3, r2
 8001854:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <HAL_RCC_ClockConfig+0x284>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	000a      	movs	r2, r1
 800185a:	40da      	lsrs	r2, r3
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_ClockConfig+0x288>)
 800185e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_RCC_ClockConfig+0x28c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	250b      	movs	r5, #11
 8001866:	197c      	adds	r4, r7, r5
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff f857 	bl	800091c <HAL_InitTick>
 800186e:	0003      	movs	r3, r0
 8001870:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001872:	197b      	adds	r3, r7, r5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d002      	beq.n	8001880 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	e000      	b.n	8001882 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	46c0      	nop			@ (mov r8, r8)
 800188c:	40022000 	.word	0x40022000
 8001890:	00001388 	.word	0x00001388
 8001894:	40021000 	.word	0x40021000
 8001898:	fffff8ff 	.word	0xfffff8ff
 800189c:	ffffc7ff 	.word	0xffffc7ff
 80018a0:	08003238 	.word	0x08003238
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b08e      	sub	sp, #56	@ 0x38
 80018b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018b2:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ba:	230c      	movs	r3, #12
 80018bc:	4013      	ands	r3, r2
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d014      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018c2:	d900      	bls.n	80018c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80018c4:	e07b      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x112>
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x24>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ce:	e076      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018d0:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2210      	movs	r2, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018da:	4b43      	ldr	r3, [pc, #268]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018de:	e07c      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80018e0:	4b42      	ldr	r3, [pc, #264]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x140>)
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018e4:	e079      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b42      	ldr	r3, [pc, #264]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018ea:	e076      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	0c9a      	lsrs	r2, r3, #18
 80018f0:	230f      	movs	r3, #15
 80018f2:	401a      	ands	r2, r3
 80018f4:	4b3f      	ldr	r3, [pc, #252]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fc:	0d9a      	lsrs	r2, r3, #22
 80018fe:	2303      	movs	r3, #3
 8001900:	4013      	ands	r3, r2
 8001902:	3301      	adds	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	4013      	ands	r3, r2
 8001910:	d01a      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	4a35      	ldr	r2, [pc, #212]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800191c:	2300      	movs	r3, #0
 800191e:	69b8      	ldr	r0, [r7, #24]
 8001920:	69f9      	ldr	r1, [r7, #28]
 8001922:	f7fe fca7 	bl	8000274 <__aeabi_lmul>
 8001926:	0002      	movs	r2, r0
 8001928:	000b      	movs	r3, r1
 800192a:	0010      	movs	r0, r2
 800192c:	0019      	movs	r1, r3
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f7fe fc7b 	bl	8000234 <__aeabi_uldivmod>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0013      	movs	r3, r2
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34
 8001946:	e037      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	4013      	ands	r3, r2
 8001950:	d01a      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800195c:	2300      	movs	r3, #0
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	f7fe fc87 	bl	8000274 <__aeabi_lmul>
 8001966:	0002      	movs	r2, r0
 8001968:	000b      	movs	r3, r1
 800196a:	0010      	movs	r0, r2
 800196c:	0019      	movs	r1, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f7fe fc5b 	bl	8000234 <__aeabi_uldivmod>
 800197e:	0002      	movs	r2, r0
 8001980:	000b      	movs	r3, r1
 8001982:	0013      	movs	r3, r2
 8001984:	637b      	str	r3, [r7, #52]	@ 0x34
 8001986:	e017      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198a:	0018      	movs	r0, r3
 800198c:	2300      	movs	r3, #0
 800198e:	0019      	movs	r1, r3
 8001990:	4a16      	ldr	r2, [pc, #88]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x140>)
 8001992:	2300      	movs	r3, #0
 8001994:	f7fe fc6e 	bl	8000274 <__aeabi_lmul>
 8001998:	0002      	movs	r2, r0
 800199a:	000b      	movs	r3, r1
 800199c:	0010      	movs	r0, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	001c      	movs	r4, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	001d      	movs	r5, r3
 80019a8:	0022      	movs	r2, r4
 80019aa:	002b      	movs	r3, r5
 80019ac:	f7fe fc42 	bl	8000234 <__aeabi_uldivmod>
 80019b0:	0002      	movs	r2, r0
 80019b2:	000b      	movs	r3, r1
 80019b4:	0013      	movs	r3, r2
 80019b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80019b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019bc:	e00d      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0b5b      	lsrs	r3, r3, #13
 80019c4:	2207      	movs	r2, #7
 80019c6:	4013      	ands	r3, r2
 80019c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	3301      	adds	r3, #1
 80019ce:	2280      	movs	r2, #128	@ 0x80
 80019d0:	0212      	lsls	r2, r2, #8
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80019d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b00e      	add	sp, #56	@ 0x38
 80019e2:	bdb0      	pop	{r4, r5, r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	003d0900 	.word	0x003d0900
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	08003250 	.word	0x08003250

080019f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fe:	681b      	ldr	r3, [r3, #0]
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff2 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a14:	0001      	movs	r1, r0
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	40d9      	lsrs	r1, r3
 8001a26:	000b      	movs	r3, r1
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08003248 	.word	0x08003248

08001a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a3c:	f7ff ffdc 	bl	80019f8 <HAL_RCC_GetHCLKFreq>
 8001a40:	0001      	movs	r1, r0
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	0adb      	lsrs	r3, r3, #11
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	40d9      	lsrs	r1, r3
 8001a52:	000b      	movs	r3, r1
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08003248 	.word	0x08003248

08001a64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001a6c:	2317      	movs	r3, #23
 8001a6e:	18fb      	adds	r3, r7, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d106      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	@ 0x80
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4013      	ands	r3, r2
 8001a88:	d100      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001a8a:	e104      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8c:	4bb1      	ldr	r3, [pc, #708]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	4013      	ands	r3, r2
 8001a96:	d10a      	bne.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4bae      	ldr	r3, [pc, #696]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a9c:	4bad      	ldr	r3, [pc, #692]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a9e:	2180      	movs	r1, #128	@ 0x80
 8001aa0:	0549      	lsls	r1, r1, #21
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4baa      	ldr	r3, [pc, #680]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4ba7      	ldr	r3, [pc, #668]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4ba6      	ldr	r3, [pc, #664]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ac0:	2180      	movs	r1, #128	@ 0x80
 8001ac2:	0049      	lsls	r1, r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac8:	f7fe ff6e 	bl	80009a8 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7fe ff69 	bl	80009a8 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	@ 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e133      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001af0:	4b98      	ldr	r3, [pc, #608]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	23c0      	movs	r3, #192	@ 0xc0
 8001af6:	039b      	lsls	r3, r3, #14
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	23c0      	movs	r3, #192	@ 0xc0
 8001b02:	039b      	lsls	r3, r3, #14
 8001b04:	4013      	ands	r3, r2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	23c0      	movs	r3, #192	@ 0xc0
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	23c0      	movs	r3, #192	@ 0xc0
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	401a      	ands	r2, r3
 8001b26:	23c0      	movs	r3, #192	@ 0xc0
 8001b28:	029b      	lsls	r3, r3, #10
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d10a      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	401a      	ands	r2, r3
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d101      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e103      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b44:	4b83      	ldr	r3, [pc, #524]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	029b      	lsls	r3, r3, #10
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d049      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	23c0      	movs	r3, #192	@ 0xc0
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	4013      	ands	r3, r2
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d004      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d10d      	bne.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	23c0      	movs	r3, #192	@ 0xc0
 8001b76:	029b      	lsls	r3, r3, #10
 8001b78:	4013      	ands	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d034      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d02e      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b8c:	4b71      	ldr	r3, [pc, #452]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b90:	4a72      	ldr	r2, [pc, #456]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b96:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	0309      	lsls	r1, r1, #12
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ba6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ba8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001baa:	496d      	ldr	r1, [pc, #436]	@ (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001bb0:	4b68      	ldr	r3, [pc, #416]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d014      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7fe fef2 	bl	80009a8 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc8:	e009      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe feed 	bl	80009a8 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a63      	ldr	r2, [pc, #396]	@ (8001d64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b6      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d0ef      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	23c0      	movs	r3, #192	@ 0xc0
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	401a      	ands	r2, r3
 8001c00:	23c0      	movs	r3, #192	@ 0xc0
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d10c      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001c08:	4b52      	ldr	r3, [pc, #328]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a56      	ldr	r2, [pc, #344]	@ (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	23c0      	movs	r3, #192	@ 0xc0
 8001c18:	039b      	lsls	r3, r3, #14
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b4c      	ldr	r3, [pc, #304]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	23c0      	movs	r3, #192	@ 0xc0
 8001c2c:	029b      	lsls	r3, r3, #10
 8001c2e:	401a      	ands	r2, r3
 8001c30:	4b48      	ldr	r3, [pc, #288]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c32:	430a      	orrs	r2, r1
 8001c34:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d01f      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	23c0      	movs	r3, #192	@ 0xc0
 8001c46:	029b      	lsls	r3, r3, #10
 8001c48:	401a      	ands	r2, r3
 8001c4a:	23c0      	movs	r3, #192	@ 0xc0
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001c52:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a44      	ldr	r2, [pc, #272]	@ (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	23c0      	movs	r3, #192	@ 0xc0
 8001c62:	039b      	lsls	r3, r3, #14
 8001c64:	401a      	ands	r2, r3
 8001c66:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c6e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	23c0      	movs	r3, #192	@ 0xc0
 8001c76:	029b      	lsls	r3, r3, #10
 8001c78:	401a      	ands	r2, r3
 8001c7a:	4b36      	ldr	r3, [pc, #216]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c80:	2317      	movs	r3, #23
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c90:	4936      	ldr	r1, [pc, #216]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d009      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cbe:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d009      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cec:	430a      	orrs	r2, r1
 8001cee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2240      	movs	r2, #64	@ 0x40
 8001d14:	4013      	ands	r3, r2
 8001d16:	d009      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d18:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1a      	ldr	r2, [r3, #32]
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b006      	add	sp, #24
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	fffcffff 	.word	0xfffcffff
 8001d60:	fff7ffff 	.word	0xfff7ffff
 8001d64:	00001388 	.word	0x00001388
 8001d68:	ffcfffff 	.word	0xffcfffff
 8001d6c:	efffffff 	.word	0xefffffff
 8001d70:	fffff3ff 	.word	0xfffff3ff
 8001d74:	ffffcfff 	.word	0xffffcfff
 8001d78:	fbffffff 	.word	0xfbffffff
 8001d7c:	fff3ffff 	.word	0xfff3ffff

08001d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e044      	b.n	8001e1c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2278      	movs	r2, #120	@ 0x78
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7fe fcd5 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2224      	movs	r2, #36	@ 0x24
 8001dae:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f000 f8d0 	bl	8001f68 <UART_SetConfig>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e024      	b.n	8001e1c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 fb47 	bl	8002470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	490d      	ldr	r1, [pc, #52]	@ (8001e24 <HAL_UART_Init+0xa4>)
 8001dee:	400a      	ands	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	212a      	movs	r1, #42	@ 0x2a
 8001dfe:	438a      	bics	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0018      	movs	r0, r3
 8001e16:	f000 fbdf 	bl	80025d8 <UART_CheckIdleState>
 8001e1a:	0003      	movs	r3, r0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	ffffb7ff 	.word	0xffffb7ff

08001e28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e3c:	2b20      	cmp	r3, #32
 8001e3e:	d000      	beq.n	8001e42 <HAL_UART_Transmit+0x1a>
 8001e40:	e08c      	b.n	8001f5c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_UART_Transmit+0x28>
 8001e48:	1dbb      	adds	r3, r7, #6
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e084      	b.n	8001f5e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	015b      	lsls	r3, r3, #5
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d109      	bne.n	8001e74 <HAL_UART_Transmit+0x4c>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d105      	bne.n	8001e74 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e074      	b.n	8001f5e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2284      	movs	r2, #132	@ 0x84
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2221      	movs	r2, #33	@ 0x21
 8001e80:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e82:	f7fe fd91 	bl	80009a8 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1dba      	adds	r2, r7, #6
 8001e8e:	2150      	movs	r1, #80	@ 0x50
 8001e90:	8812      	ldrh	r2, [r2, #0]
 8001e92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1dba      	adds	r2, r7, #6
 8001e98:	2152      	movs	r1, #82	@ 0x52
 8001e9a:	8812      	ldrh	r2, [r2, #0]
 8001e9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Transmit+0x94>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ec4:	e02f      	b.n	8001f26 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	0013      	movs	r3, r2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2180      	movs	r1, #128	@ 0x80
 8001ed4:	f000 fc28 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8001ed8:	1e03      	subs	r3, r0, #0
 8001eda:	d004      	beq.n	8001ee6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e03b      	b.n	8001f5e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	05d2      	lsls	r2, r2, #23
 8001ef8:	0dd2      	lsrs	r2, r2, #23
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	3302      	adds	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	e007      	b.n	8001f14 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2252      	movs	r2, #82	@ 0x52
 8001f18:	5a9b      	ldrh	r3, [r3, r2]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2252      	movs	r2, #82	@ 0x52
 8001f24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2252      	movs	r2, #82	@ 0x52
 8001f2a:	5a9b      	ldrh	r3, [r3, r2]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1c9      	bne.n	8001ec6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2140      	movs	r1, #64	@ 0x40
 8001f40:	f000 fbf2 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8001f44:	1e03      	subs	r3, r0, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e005      	b.n	8001f5e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2220      	movs	r2, #32
 8001f56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b008      	add	sp, #32
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f68:	b5b0      	push	{r4, r5, r7, lr}
 8001f6a:	b08e      	sub	sp, #56	@ 0x38
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f70:	231a      	movs	r3, #26
 8001f72:	2218      	movs	r2, #24
 8001f74:	189b      	adds	r3, r3, r2
 8001f76:	19db      	adds	r3, r3, r7
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4ac6      	ldr	r2, [pc, #792]	@ (80022b4 <UART_SetConfig+0x34c>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	4ac1      	ldr	r2, [pc, #772]	@ (80022b8 <UART_SetConfig+0x350>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4abb      	ldr	r2, [pc, #748]	@ (80022bc <UART_SetConfig+0x354>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d004      	beq.n	8001fdc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4ab7      	ldr	r2, [pc, #732]	@ (80022c0 <UART_SetConfig+0x358>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4ab3      	ldr	r2, [pc, #716]	@ (80022c4 <UART_SetConfig+0x35c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d131      	bne.n	8002060 <UART_SetConfig+0xf8>
 8001ffc:	4bb2      	ldr	r3, [pc, #712]	@ (80022c8 <UART_SetConfig+0x360>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	2203      	movs	r2, #3
 8002002:	4013      	ands	r3, r2
 8002004:	2b03      	cmp	r3, #3
 8002006:	d01d      	beq.n	8002044 <UART_SetConfig+0xdc>
 8002008:	d823      	bhi.n	8002052 <UART_SetConfig+0xea>
 800200a:	2b02      	cmp	r3, #2
 800200c:	d00c      	beq.n	8002028 <UART_SetConfig+0xc0>
 800200e:	d820      	bhi.n	8002052 <UART_SetConfig+0xea>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <UART_SetConfig+0xb2>
 8002014:	2b01      	cmp	r3, #1
 8002016:	d00e      	beq.n	8002036 <UART_SetConfig+0xce>
 8002018:	e01b      	b.n	8002052 <UART_SetConfig+0xea>
 800201a:	231b      	movs	r3, #27
 800201c:	2218      	movs	r2, #24
 800201e:	189b      	adds	r3, r3, r2
 8002020:	19db      	adds	r3, r3, r7
 8002022:	2201      	movs	r2, #1
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e09c      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002028:	231b      	movs	r3, #27
 800202a:	2218      	movs	r2, #24
 800202c:	189b      	adds	r3, r3, r2
 800202e:	19db      	adds	r3, r3, r7
 8002030:	2202      	movs	r2, #2
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e095      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002036:	231b      	movs	r3, #27
 8002038:	2218      	movs	r2, #24
 800203a:	189b      	adds	r3, r3, r2
 800203c:	19db      	adds	r3, r3, r7
 800203e:	2204      	movs	r2, #4
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e08e      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002044:	231b      	movs	r3, #27
 8002046:	2218      	movs	r2, #24
 8002048:	189b      	adds	r3, r3, r2
 800204a:	19db      	adds	r3, r3, r7
 800204c:	2208      	movs	r2, #8
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e087      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002052:	231b      	movs	r3, #27
 8002054:	2218      	movs	r2, #24
 8002056:	189b      	adds	r3, r3, r2
 8002058:	19db      	adds	r3, r3, r7
 800205a:	2210      	movs	r2, #16
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e080      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a99      	ldr	r2, [pc, #612]	@ (80022cc <UART_SetConfig+0x364>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d131      	bne.n	80020ce <UART_SetConfig+0x166>
 800206a:	4b97      	ldr	r3, [pc, #604]	@ (80022c8 <UART_SetConfig+0x360>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	220c      	movs	r2, #12
 8002070:	4013      	ands	r3, r2
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d01d      	beq.n	80020b2 <UART_SetConfig+0x14a>
 8002076:	d823      	bhi.n	80020c0 <UART_SetConfig+0x158>
 8002078:	2b08      	cmp	r3, #8
 800207a:	d00c      	beq.n	8002096 <UART_SetConfig+0x12e>
 800207c:	d820      	bhi.n	80020c0 <UART_SetConfig+0x158>
 800207e:	2b00      	cmp	r3, #0
 8002080:	d002      	beq.n	8002088 <UART_SetConfig+0x120>
 8002082:	2b04      	cmp	r3, #4
 8002084:	d00e      	beq.n	80020a4 <UART_SetConfig+0x13c>
 8002086:	e01b      	b.n	80020c0 <UART_SetConfig+0x158>
 8002088:	231b      	movs	r3, #27
 800208a:	2218      	movs	r2, #24
 800208c:	189b      	adds	r3, r3, r2
 800208e:	19db      	adds	r3, r3, r7
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e065      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002096:	231b      	movs	r3, #27
 8002098:	2218      	movs	r2, #24
 800209a:	189b      	adds	r3, r3, r2
 800209c:	19db      	adds	r3, r3, r7
 800209e:	2202      	movs	r2, #2
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e05e      	b.n	8002162 <UART_SetConfig+0x1fa>
 80020a4:	231b      	movs	r3, #27
 80020a6:	2218      	movs	r2, #24
 80020a8:	189b      	adds	r3, r3, r2
 80020aa:	19db      	adds	r3, r3, r7
 80020ac:	2204      	movs	r2, #4
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e057      	b.n	8002162 <UART_SetConfig+0x1fa>
 80020b2:	231b      	movs	r3, #27
 80020b4:	2218      	movs	r2, #24
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	19db      	adds	r3, r3, r7
 80020ba:	2208      	movs	r2, #8
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	e050      	b.n	8002162 <UART_SetConfig+0x1fa>
 80020c0:	231b      	movs	r3, #27
 80020c2:	2218      	movs	r2, #24
 80020c4:	189b      	adds	r3, r3, r2
 80020c6:	19db      	adds	r3, r3, r7
 80020c8:	2210      	movs	r2, #16
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	e049      	b.n	8002162 <UART_SetConfig+0x1fa>
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	@ (80022bc <UART_SetConfig+0x354>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d13e      	bne.n	8002156 <UART_SetConfig+0x1ee>
 80020d8:	4b7b      	ldr	r3, [pc, #492]	@ (80022c8 <UART_SetConfig+0x360>)
 80020da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020dc:	23c0      	movs	r3, #192	@ 0xc0
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	4013      	ands	r3, r2
 80020e2:	22c0      	movs	r2, #192	@ 0xc0
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d027      	beq.n	800213a <UART_SetConfig+0x1d2>
 80020ea:	22c0      	movs	r2, #192	@ 0xc0
 80020ec:	0112      	lsls	r2, r2, #4
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d82a      	bhi.n	8002148 <UART_SetConfig+0x1e0>
 80020f2:	2280      	movs	r2, #128	@ 0x80
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d011      	beq.n	800211e <UART_SetConfig+0x1b6>
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	4293      	cmp	r3, r2
 8002100:	d822      	bhi.n	8002148 <UART_SetConfig+0x1e0>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <UART_SetConfig+0x1a8>
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <UART_SetConfig+0x1c4>
 800210e:	e01b      	b.n	8002148 <UART_SetConfig+0x1e0>
 8002110:	231b      	movs	r3, #27
 8002112:	2218      	movs	r2, #24
 8002114:	189b      	adds	r3, r3, r2
 8002116:	19db      	adds	r3, r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	e021      	b.n	8002162 <UART_SetConfig+0x1fa>
 800211e:	231b      	movs	r3, #27
 8002120:	2218      	movs	r2, #24
 8002122:	189b      	adds	r3, r3, r2
 8002124:	19db      	adds	r3, r3, r7
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e01a      	b.n	8002162 <UART_SetConfig+0x1fa>
 800212c:	231b      	movs	r3, #27
 800212e:	2218      	movs	r2, #24
 8002130:	189b      	adds	r3, r3, r2
 8002132:	19db      	adds	r3, r3, r7
 8002134:	2204      	movs	r2, #4
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e013      	b.n	8002162 <UART_SetConfig+0x1fa>
 800213a:	231b      	movs	r3, #27
 800213c:	2218      	movs	r2, #24
 800213e:	189b      	adds	r3, r3, r2
 8002140:	19db      	adds	r3, r3, r7
 8002142:	2208      	movs	r2, #8
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e00c      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002148:	231b      	movs	r3, #27
 800214a:	2218      	movs	r2, #24
 800214c:	189b      	adds	r3, r3, r2
 800214e:	19db      	adds	r3, r3, r7
 8002150:	2210      	movs	r2, #16
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	e005      	b.n	8002162 <UART_SetConfig+0x1fa>
 8002156:	231b      	movs	r3, #27
 8002158:	2218      	movs	r2, #24
 800215a:	189b      	adds	r3, r3, r2
 800215c:	19db      	adds	r3, r3, r7
 800215e:	2210      	movs	r2, #16
 8002160:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <UART_SetConfig+0x354>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d000      	beq.n	800216e <UART_SetConfig+0x206>
 800216c:	e084      	b.n	8002278 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800216e:	231b      	movs	r3, #27
 8002170:	2218      	movs	r2, #24
 8002172:	189b      	adds	r3, r3, r2
 8002174:	19db      	adds	r3, r3, r7
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d01d      	beq.n	80021b8 <UART_SetConfig+0x250>
 800217c:	dc20      	bgt.n	80021c0 <UART_SetConfig+0x258>
 800217e:	2b04      	cmp	r3, #4
 8002180:	d015      	beq.n	80021ae <UART_SetConfig+0x246>
 8002182:	dc1d      	bgt.n	80021c0 <UART_SetConfig+0x258>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <UART_SetConfig+0x226>
 8002188:	2b02      	cmp	r3, #2
 800218a:	d005      	beq.n	8002198 <UART_SetConfig+0x230>
 800218c:	e018      	b.n	80021c0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800218e:	f7ff fc3d 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002192:	0003      	movs	r3, r0
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002196:	e01c      	b.n	80021d2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002198:	4b4b      	ldr	r3, [pc, #300]	@ (80022c8 <UART_SetConfig+0x360>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	4013      	ands	r3, r2
 80021a0:	d002      	beq.n	80021a8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80021a2:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <UART_SetConfig+0x368>)
 80021a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80021a6:	e014      	b.n	80021d2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80021a8:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <UART_SetConfig+0x36c>)
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80021ac:	e011      	b.n	80021d2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ae:	f7ff fb7d 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80021b2:	0003      	movs	r3, r0
 80021b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80021b6:	e00c      	b.n	80021d2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021b8:	2380      	movs	r3, #128	@ 0x80
 80021ba:	021b      	lsls	r3, r3, #8
 80021bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80021be:	e008      	b.n	80021d2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80021c4:	231a      	movs	r3, #26
 80021c6:	2218      	movs	r2, #24
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	19db      	adds	r3, r3, r7
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
        break;
 80021d0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d100      	bne.n	80021da <UART_SetConfig+0x272>
 80021d8:	e132      	b.n	8002440 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	0013      	movs	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	189b      	adds	r3, r3, r2
 80021e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d305      	bcc.n	80021f6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d906      	bls.n	8002204 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80021f6:	231a      	movs	r3, #26
 80021f8:	2218      	movs	r2, #24
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	19db      	adds	r3, r3, r7
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e11d      	b.n	8002440 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	6939      	ldr	r1, [r7, #16]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	000b      	movs	r3, r1
 8002212:	0e1b      	lsrs	r3, r3, #24
 8002214:	0010      	movs	r0, r2
 8002216:	0205      	lsls	r5, r0, #8
 8002218:	431d      	orrs	r5, r3
 800221a:	000b      	movs	r3, r1
 800221c:	021c      	lsls	r4, r3, #8
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68b8      	ldr	r0, [r7, #8]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	1900      	adds	r0, r0, r4
 8002230:	4169      	adcs	r1, r5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	2300      	movs	r3, #0
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f7fd fff8 	bl	8000234 <__aeabi_uldivmod>
 8002244:	0002      	movs	r2, r0
 8002246:	000b      	movs	r3, r1
 8002248:	0013      	movs	r3, r2
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800224c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800224e:	23c0      	movs	r3, #192	@ 0xc0
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	429a      	cmp	r2, r3
 8002254:	d309      	bcc.n	800226a <UART_SetConfig+0x302>
 8002256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	035b      	lsls	r3, r3, #13
 800225c:	429a      	cmp	r2, r3
 800225e:	d204      	bcs.n	800226a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	e0ea      	b.n	8002440 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800226a:	231a      	movs	r3, #26
 800226c:	2218      	movs	r2, #24
 800226e:	189b      	adds	r3, r3, r2
 8002270:	19db      	adds	r3, r3, r7
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
 8002276:	e0e3      	b.n	8002440 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	429a      	cmp	r2, r3
 8002282:	d000      	beq.n	8002286 <UART_SetConfig+0x31e>
 8002284:	e085      	b.n	8002392 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002286:	231b      	movs	r3, #27
 8002288:	2218      	movs	r2, #24
 800228a:	189b      	adds	r3, r3, r2
 800228c:	19db      	adds	r3, r3, r7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d837      	bhi.n	8002304 <UART_SetConfig+0x39c>
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	4b10      	ldr	r3, [pc, #64]	@ (80022d8 <UART_SetConfig+0x370>)
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800229e:	f7ff fbb5 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80022a2:	0003      	movs	r3, r0
 80022a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022a6:	e036      	b.n	8002316 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80022a8:	f7ff fbc6 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 80022ac:	0003      	movs	r3, r0
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022b0:	e031      	b.n	8002316 <UART_SetConfig+0x3ae>
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	efff69f3 	.word	0xefff69f3
 80022b8:	ffffcfff 	.word	0xffffcfff
 80022bc:	40004800 	.word	0x40004800
 80022c0:	fffff4ff 	.word	0xfffff4ff
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40004400 	.word	0x40004400
 80022d0:	003d0900 	.word	0x003d0900
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	0800325c 	.word	0x0800325c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022dc:	4b60      	ldr	r3, [pc, #384]	@ (8002460 <UART_SetConfig+0x4f8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2210      	movs	r2, #16
 80022e2:	4013      	ands	r3, r2
 80022e4:	d002      	beq.n	80022ec <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80022e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002464 <UART_SetConfig+0x4fc>)
 80022e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80022ea:	e014      	b.n	8002316 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80022ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <UART_SetConfig+0x500>)
 80022ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022f0:	e011      	b.n	8002316 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022f2:	f7ff fadb 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80022f6:	0003      	movs	r3, r0
 80022f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80022fa:	e00c      	b.n	8002316 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002302:	e008      	b.n	8002316 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002308:	231a      	movs	r3, #26
 800230a:	2218      	movs	r2, #24
 800230c:	189b      	adds	r3, r3, r2
 800230e:	19db      	adds	r3, r3, r7
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
        break;
 8002314:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d100      	bne.n	800231e <UART_SetConfig+0x3b6>
 800231c:	e090      	b.n	8002440 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002320:	005a      	lsls	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	18d2      	adds	r2, r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0019      	movs	r1, r3
 8002330:	0010      	movs	r0, r2
 8002332:	f7fd fef3 	bl	800011c <__udivsi3>
 8002336:	0003      	movs	r3, r0
 8002338:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800233a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800233c:	2b0f      	cmp	r3, #15
 800233e:	d921      	bls.n	8002384 <UART_SetConfig+0x41c>
 8002340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002342:	2380      	movs	r3, #128	@ 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	429a      	cmp	r2, r3
 8002348:	d21c      	bcs.n	8002384 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	b29a      	uxth	r2, r3
 800234e:	200e      	movs	r0, #14
 8002350:	2418      	movs	r4, #24
 8002352:	1903      	adds	r3, r0, r4
 8002354:	19db      	adds	r3, r3, r7
 8002356:	210f      	movs	r1, #15
 8002358:	438a      	bics	r2, r1
 800235a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	b29b      	uxth	r3, r3
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	b299      	uxth	r1, r3
 8002368:	1903      	adds	r3, r0, r4
 800236a:	19db      	adds	r3, r3, r7
 800236c:	1902      	adds	r2, r0, r4
 800236e:	19d2      	adds	r2, r2, r7
 8002370:	8812      	ldrh	r2, [r2, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1902      	adds	r2, r0, r4
 800237c:	19d2      	adds	r2, r2, r7
 800237e:	8812      	ldrh	r2, [r2, #0]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e05d      	b.n	8002440 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002384:	231a      	movs	r3, #26
 8002386:	2218      	movs	r2, #24
 8002388:	189b      	adds	r3, r3, r2
 800238a:	19db      	adds	r3, r3, r7
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e056      	b.n	8002440 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002392:	231b      	movs	r3, #27
 8002394:	2218      	movs	r2, #24
 8002396:	189b      	adds	r3, r3, r2
 8002398:	19db      	adds	r3, r3, r7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d822      	bhi.n	80023e6 <UART_SetConfig+0x47e>
 80023a0:	009a      	lsls	r2, r3, #2
 80023a2:	4b32      	ldr	r3, [pc, #200]	@ (800246c <UART_SetConfig+0x504>)
 80023a4:	18d3      	adds	r3, r2, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023aa:	f7ff fb2f 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80023ae:	0003      	movs	r3, r0
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023b2:	e021      	b.n	80023f8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023b4:	f7ff fb40 	bl	8001a38 <HAL_RCC_GetPCLK2Freq>
 80023b8:	0003      	movs	r3, r0
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023bc:	e01c      	b.n	80023f8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <UART_SetConfig+0x4f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2210      	movs	r2, #16
 80023c4:	4013      	ands	r3, r2
 80023c6:	d002      	beq.n	80023ce <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80023c8:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <UART_SetConfig+0x4fc>)
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80023cc:	e014      	b.n	80023f8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <UART_SetConfig+0x500>)
 80023d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023d2:	e011      	b.n	80023f8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023d4:	f7ff fa6a 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80023d8:	0003      	movs	r3, r0
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023dc:	e00c      	b.n	80023f8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80023e4:	e008      	b.n	80023f8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80023ea:	231a      	movs	r3, #26
 80023ec:	2218      	movs	r2, #24
 80023ee:	189b      	adds	r3, r3, r2
 80023f0:	19db      	adds	r3, r3, r7
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
        break;
 80023f6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d020      	beq.n	8002440 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	085a      	lsrs	r2, r3, #1
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	18d2      	adds	r2, r2, r3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0019      	movs	r1, r3
 800240e:	0010      	movs	r0, r2
 8002410:	f7fd fe84 	bl	800011c <__udivsi3>
 8002414:	0003      	movs	r3, r0
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241a:	2b0f      	cmp	r3, #15
 800241c:	d90a      	bls.n	8002434 <UART_SetConfig+0x4cc>
 800241e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	429a      	cmp	r2, r3
 8002426:	d205      	bcs.n	8002434 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	b29a      	uxth	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	e005      	b.n	8002440 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002434:	231a      	movs	r3, #26
 8002436:	2218      	movs	r2, #24
 8002438:	189b      	adds	r3, r3, r2
 800243a:	19db      	adds	r3, r3, r7
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2200      	movs	r2, #0
 8002444:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	2200      	movs	r2, #0
 800244a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800244c:	231a      	movs	r3, #26
 800244e:	2218      	movs	r2, #24
 8002450:	189b      	adds	r3, r3, r2
 8002452:	19db      	adds	r3, r3, r7
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b00e      	add	sp, #56	@ 0x38
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	40021000 	.word	0x40021000
 8002464:	003d0900 	.word	0x003d0900
 8002468:	00f42400 	.word	0x00f42400
 800246c:	08003280 	.word	0x08003280

08002470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	d00b      	beq.n	800249a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a4a      	ldr	r2, [pc, #296]	@ (80025b4 <UART_AdvFeatureConfig+0x144>)
 800248a:	4013      	ands	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	2202      	movs	r2, #2
 80024a0:	4013      	ands	r3, r2
 80024a2:	d00b      	beq.n	80024bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a43      	ldr	r2, [pc, #268]	@ (80025b8 <UART_AdvFeatureConfig+0x148>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	0019      	movs	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d00b      	beq.n	80024de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a3b      	ldr	r2, [pc, #236]	@ (80025bc <UART_AdvFeatureConfig+0x14c>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	2208      	movs	r2, #8
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00b      	beq.n	8002500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4a34      	ldr	r2, [pc, #208]	@ (80025c0 <UART_AdvFeatureConfig+0x150>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2210      	movs	r2, #16
 8002506:	4013      	ands	r3, r2
 8002508:	d00b      	beq.n	8002522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a2c      	ldr	r2, [pc, #176]	@ (80025c4 <UART_AdvFeatureConfig+0x154>)
 8002512:	4013      	ands	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2220      	movs	r2, #32
 8002528:	4013      	ands	r3, r2
 800252a:	d00b      	beq.n	8002544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a25      	ldr	r2, [pc, #148]	@ (80025c8 <UART_AdvFeatureConfig+0x158>)
 8002534:	4013      	ands	r3, r2
 8002536:	0019      	movs	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	2240      	movs	r2, #64	@ 0x40
 800254a:	4013      	ands	r3, r2
 800254c:	d01d      	beq.n	800258a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <UART_AdvFeatureConfig+0x15c>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	035b      	lsls	r3, r3, #13
 800256e:	429a      	cmp	r2, r3
 8002570:	d10b      	bne.n	800258a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <UART_AdvFeatureConfig+0x160>)
 800257a:	4013      	ands	r3, r2
 800257c:	0019      	movs	r1, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	2280      	movs	r2, #128	@ 0x80
 8002590:	4013      	ands	r3, r2
 8002592:	d00b      	beq.n	80025ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a0e      	ldr	r2, [pc, #56]	@ (80025d4 <UART_AdvFeatureConfig+0x164>)
 800259c:	4013      	ands	r3, r2
 800259e:	0019      	movs	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
  }
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	fffdffff 	.word	0xfffdffff
 80025b8:	fffeffff 	.word	0xfffeffff
 80025bc:	fffbffff 	.word	0xfffbffff
 80025c0:	ffff7fff 	.word	0xffff7fff
 80025c4:	ffffefff 	.word	0xffffefff
 80025c8:	ffffdfff 	.word	0xffffdfff
 80025cc:	ffefffff 	.word	0xffefffff
 80025d0:	ff9fffff 	.word	0xff9fffff
 80025d4:	fff7ffff 	.word	0xfff7ffff

080025d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b092      	sub	sp, #72	@ 0x48
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2284      	movs	r2, #132	@ 0x84
 80025e4:	2100      	movs	r1, #0
 80025e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80025e8:	f7fe f9de 	bl	80009a8 <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2208      	movs	r2, #8
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d12c      	bne.n	8002658 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002600:	2280      	movs	r2, #128	@ 0x80
 8002602:	0391      	lsls	r1, r2, #14
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4a46      	ldr	r2, [pc, #280]	@ (8002720 <UART_CheckIdleState+0x148>)
 8002608:	9200      	str	r2, [sp, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	f000 f88c 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d021      	beq.n	8002658 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002614:	f3ef 8310 	mrs	r3, PRIMASK
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800261c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800261e:	2301      	movs	r3, #1
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	f383 8810 	msr	PRIMASK, r3
}
 8002628:	46c0      	nop			@ (mov r8, r8)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2180      	movs	r1, #128	@ 0x80
 8002636:	438a      	bics	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002640:	f383 8810 	msr	PRIMASK, r3
}
 8002644:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2220      	movs	r2, #32
 800264a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2278      	movs	r2, #120	@ 0x78
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e05f      	b.n	8002718 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2204      	movs	r2, #4
 8002660:	4013      	ands	r3, r2
 8002662:	2b04      	cmp	r3, #4
 8002664:	d146      	bne.n	80026f4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002668:	2280      	movs	r2, #128	@ 0x80
 800266a:	03d1      	lsls	r1, r2, #15
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4a2c      	ldr	r2, [pc, #176]	@ (8002720 <UART_CheckIdleState+0x148>)
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	f000 f858 	bl	8002728 <UART_WaitOnFlagUntilTimeout>
 8002678:	1e03      	subs	r3, r0, #0
 800267a:	d03b      	beq.n	80026f4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267c:	f3ef 8310 	mrs	r3, PRIMASK
 8002680:	60fb      	str	r3, [r7, #12]
  return(result);
 8002682:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002684:	637b      	str	r3, [r7, #52]	@ 0x34
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f383 8810 	msr	PRIMASK, r3
}
 8002690:	46c0      	nop			@ (mov r8, r8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4921      	ldr	r1, [pc, #132]	@ (8002724 <UART_CheckIdleState+0x14c>)
 800269e:	400a      	ands	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f383 8810 	msr	PRIMASK, r3
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ae:	f3ef 8310 	mrs	r3, PRIMASK
 80026b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80026b4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80026b8:	2301      	movs	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f383 8810 	msr	PRIMASK, r3
}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f383 8810 	msr	PRIMASK, r3
}
 80026de:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	2120      	movs	r1, #32
 80026e6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2278      	movs	r2, #120	@ 0x78
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e011      	b.n	8002718 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2280      	movs	r2, #128	@ 0x80
 80026fe:	2120      	movs	r1, #32
 8002700:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2278      	movs	r2, #120	@ 0x78
 8002712:	2100      	movs	r1, #0
 8002714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b010      	add	sp, #64	@ 0x40
 800271e:	bd80      	pop	{r7, pc}
 8002720:	01ffffff 	.word	0x01ffffff
 8002724:	fffffedf 	.word	0xfffffedf

08002728 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002738:	e04b      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	3301      	adds	r3, #1
 800273e:	d048      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002740:	f7fe f932 	bl	80009a8 <HAL_GetTick>
 8002744:	0002      	movs	r2, r0
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	429a      	cmp	r2, r3
 800274e:	d302      	bcc.n	8002756 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e04b      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2204      	movs	r2, #4
 8002762:	4013      	ands	r3, r2
 8002764:	d035      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	2208      	movs	r2, #8
 800276e:	4013      	ands	r3, r2
 8002770:	2b08      	cmp	r3, #8
 8002772:	d111      	bne.n	8002798 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2208      	movs	r2, #8
 800277a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	0018      	movs	r0, r3
 8002780:	f000 f83c 	bl	80027fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2284      	movs	r2, #132	@ 0x84
 8002788:	2108      	movs	r1, #8
 800278a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2278      	movs	r2, #120	@ 0x78
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e02c      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	2380      	movs	r3, #128	@ 0x80
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	401a      	ands	r2, r3
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d112      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2280      	movs	r2, #128	@ 0x80
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f81f 	bl	80027fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2284      	movs	r2, #132	@ 0x84
 80027c2:	2120      	movs	r1, #32
 80027c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2278      	movs	r2, #120	@ 0x78
 80027ca:	2100      	movs	r1, #0
 80027cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e00f      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	425a      	negs	r2, r3
 80027e2:	4153      	adcs	r3, r2
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d0a4      	beq.n	800273a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b004      	add	sp, #16
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	@ 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	617b      	str	r3, [r7, #20]
  return(result);
 800280a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280c:	637b      	str	r3, [r7, #52]	@ 0x34
 800280e:	2301      	movs	r3, #1
 8002810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f383 8810 	msr	PRIMASK, r3
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4926      	ldr	r1, [pc, #152]	@ (80028c0 <UART_EndRxTransfer+0xc4>)
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002836:	f3ef 8310 	mrs	r3, PRIMASK
 800283a:	623b      	str	r3, [r7, #32]
  return(result);
 800283c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800283e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002840:	2301      	movs	r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	f383 8810 	msr	PRIMASK, r3
}
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	438a      	bics	r2, r1
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	2b01      	cmp	r3, #1
 800286e:	d118      	bne.n	80028a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002870:	f3ef 8310 	mrs	r3, PRIMASK
 8002874:	60bb      	str	r3, [r7, #8]
  return(result);
 8002876:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287a:	2301      	movs	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2110      	movs	r1, #16
 8002892:	438a      	bics	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f383 8810 	msr	PRIMASK, r3
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	2120      	movs	r1, #32
 80028a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b00e      	add	sp, #56	@ 0x38
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	fffffedf 	.word	0xfffffedf

080028c4 <siprintf>:
 80028c4:	b40e      	push	{r1, r2, r3}
 80028c6:	b500      	push	{lr}
 80028c8:	490b      	ldr	r1, [pc, #44]	@ (80028f8 <siprintf+0x34>)
 80028ca:	b09c      	sub	sp, #112	@ 0x70
 80028cc:	ab1d      	add	r3, sp, #116	@ 0x74
 80028ce:	9002      	str	r0, [sp, #8]
 80028d0:	9006      	str	r0, [sp, #24]
 80028d2:	9107      	str	r1, [sp, #28]
 80028d4:	9104      	str	r1, [sp, #16]
 80028d6:	4809      	ldr	r0, [pc, #36]	@ (80028fc <siprintf+0x38>)
 80028d8:	4909      	ldr	r1, [pc, #36]	@ (8002900 <siprintf+0x3c>)
 80028da:	cb04      	ldmia	r3!, {r2}
 80028dc:	9105      	str	r1, [sp, #20]
 80028de:	6800      	ldr	r0, [r0, #0]
 80028e0:	a902      	add	r1, sp, #8
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	f000 f99e 	bl	8002c24 <_svfiprintf_r>
 80028e8:	2200      	movs	r2, #0
 80028ea:	9b02      	ldr	r3, [sp, #8]
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	b01c      	add	sp, #112	@ 0x70
 80028f0:	bc08      	pop	{r3}
 80028f2:	b003      	add	sp, #12
 80028f4:	4718      	bx	r3
 80028f6:	46c0      	nop			@ (mov r8, r8)
 80028f8:	7fffffff 	.word	0x7fffffff
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	ffff0208 	.word	0xffff0208

08002904 <memset>:
 8002904:	0003      	movs	r3, r0
 8002906:	1882      	adds	r2, r0, r2
 8002908:	4293      	cmp	r3, r2
 800290a:	d100      	bne.n	800290e <memset+0xa>
 800290c:	4770      	bx	lr
 800290e:	7019      	strb	r1, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	e7f9      	b.n	8002908 <memset+0x4>

08002914 <__errno>:
 8002914:	4b01      	ldr	r3, [pc, #4]	@ (800291c <__errno+0x8>)
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	4770      	bx	lr
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	2000000c 	.word	0x2000000c

08002920 <__libc_init_array>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	2600      	movs	r6, #0
 8002924:	4c0c      	ldr	r4, [pc, #48]	@ (8002958 <__libc_init_array+0x38>)
 8002926:	4d0d      	ldr	r5, [pc, #52]	@ (800295c <__libc_init_array+0x3c>)
 8002928:	1b64      	subs	r4, r4, r5
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	42a6      	cmp	r6, r4
 800292e:	d109      	bne.n	8002944 <__libc_init_array+0x24>
 8002930:	2600      	movs	r6, #0
 8002932:	f000 fc65 	bl	8003200 <_init>
 8002936:	4c0a      	ldr	r4, [pc, #40]	@ (8002960 <__libc_init_array+0x40>)
 8002938:	4d0a      	ldr	r5, [pc, #40]	@ (8002964 <__libc_init_array+0x44>)
 800293a:	1b64      	subs	r4, r4, r5
 800293c:	10a4      	asrs	r4, r4, #2
 800293e:	42a6      	cmp	r6, r4
 8002940:	d105      	bne.n	800294e <__libc_init_array+0x2e>
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	00b3      	lsls	r3, r6, #2
 8002946:	58eb      	ldr	r3, [r5, r3]
 8002948:	4798      	blx	r3
 800294a:	3601      	adds	r6, #1
 800294c:	e7ee      	b.n	800292c <__libc_init_array+0xc>
 800294e:	00b3      	lsls	r3, r6, #2
 8002950:	58eb      	ldr	r3, [r5, r3]
 8002952:	4798      	blx	r3
 8002954:	3601      	adds	r6, #1
 8002956:	e7f2      	b.n	800293e <__libc_init_array+0x1e>
 8002958:	080032e0 	.word	0x080032e0
 800295c:	080032e0 	.word	0x080032e0
 8002960:	080032e4 	.word	0x080032e4
 8002964:	080032e0 	.word	0x080032e0

08002968 <__retarget_lock_acquire_recursive>:
 8002968:	4770      	bx	lr

0800296a <__retarget_lock_release_recursive>:
 800296a:	4770      	bx	lr

0800296c <_free_r>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	0005      	movs	r5, r0
 8002970:	1e0c      	subs	r4, r1, #0
 8002972:	d010      	beq.n	8002996 <_free_r+0x2a>
 8002974:	3c04      	subs	r4, #4
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	da00      	bge.n	800297e <_free_r+0x12>
 800297c:	18e4      	adds	r4, r4, r3
 800297e:	0028      	movs	r0, r5
 8002980:	f000 f8e0 	bl	8002b44 <__malloc_lock>
 8002984:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <_free_r+0x90>)
 8002986:	6813      	ldr	r3, [r2, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <_free_r+0x2c>
 800298c:	6063      	str	r3, [r4, #4]
 800298e:	6014      	str	r4, [r2, #0]
 8002990:	0028      	movs	r0, r5
 8002992:	f000 f8df 	bl	8002b54 <__malloc_unlock>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	42a3      	cmp	r3, r4
 800299a:	d908      	bls.n	80029ae <_free_r+0x42>
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	1821      	adds	r1, r4, r0
 80029a0:	428b      	cmp	r3, r1
 80029a2:	d1f3      	bne.n	800298c <_free_r+0x20>
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	1809      	adds	r1, r1, r0
 80029aa:	6021      	str	r1, [r4, #0]
 80029ac:	e7ee      	b.n	800298c <_free_r+0x20>
 80029ae:	001a      	movs	r2, r3
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <_free_r+0x4e>
 80029b6:	42a3      	cmp	r3, r4
 80029b8:	d9f9      	bls.n	80029ae <_free_r+0x42>
 80029ba:	6811      	ldr	r1, [r2, #0]
 80029bc:	1850      	adds	r0, r2, r1
 80029be:	42a0      	cmp	r0, r4
 80029c0:	d10b      	bne.n	80029da <_free_r+0x6e>
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	1809      	adds	r1, r1, r0
 80029c6:	1850      	adds	r0, r2, r1
 80029c8:	6011      	str	r1, [r2, #0]
 80029ca:	4283      	cmp	r3, r0
 80029cc:	d1e0      	bne.n	8002990 <_free_r+0x24>
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	1841      	adds	r1, r0, r1
 80029d4:	6011      	str	r1, [r2, #0]
 80029d6:	6053      	str	r3, [r2, #4]
 80029d8:	e7da      	b.n	8002990 <_free_r+0x24>
 80029da:	42a0      	cmp	r0, r4
 80029dc:	d902      	bls.n	80029e4 <_free_r+0x78>
 80029de:	230c      	movs	r3, #12
 80029e0:	602b      	str	r3, [r5, #0]
 80029e2:	e7d5      	b.n	8002990 <_free_r+0x24>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	1821      	adds	r1, r4, r0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d103      	bne.n	80029f4 <_free_r+0x88>
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	1809      	adds	r1, r1, r0
 80029f2:	6021      	str	r1, [r4, #0]
 80029f4:	6063      	str	r3, [r4, #4]
 80029f6:	6054      	str	r4, [r2, #4]
 80029f8:	e7ca      	b.n	8002990 <_free_r+0x24>
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	2000024c 	.word	0x2000024c

08002a00 <sbrk_aligned>:
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4e0f      	ldr	r6, [pc, #60]	@ (8002a40 <sbrk_aligned+0x40>)
 8002a04:	000d      	movs	r5, r1
 8002a06:	6831      	ldr	r1, [r6, #0]
 8002a08:	0004      	movs	r4, r0
 8002a0a:	2900      	cmp	r1, #0
 8002a0c:	d102      	bne.n	8002a14 <sbrk_aligned+0x14>
 8002a0e:	f000 fb99 	bl	8003144 <_sbrk_r>
 8002a12:	6030      	str	r0, [r6, #0]
 8002a14:	0029      	movs	r1, r5
 8002a16:	0020      	movs	r0, r4
 8002a18:	f000 fb94 	bl	8003144 <_sbrk_r>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d103      	bne.n	8002a28 <sbrk_aligned+0x28>
 8002a20:	2501      	movs	r5, #1
 8002a22:	426d      	negs	r5, r5
 8002a24:	0028      	movs	r0, r5
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
 8002a28:	2303      	movs	r3, #3
 8002a2a:	1cc5      	adds	r5, r0, #3
 8002a2c:	439d      	bics	r5, r3
 8002a2e:	42a8      	cmp	r0, r5
 8002a30:	d0f8      	beq.n	8002a24 <sbrk_aligned+0x24>
 8002a32:	1a29      	subs	r1, r5, r0
 8002a34:	0020      	movs	r0, r4
 8002a36:	f000 fb85 	bl	8003144 <_sbrk_r>
 8002a3a:	3001      	adds	r0, #1
 8002a3c:	d1f2      	bne.n	8002a24 <sbrk_aligned+0x24>
 8002a3e:	e7ef      	b.n	8002a20 <sbrk_aligned+0x20>
 8002a40:	20000248 	.word	0x20000248

08002a44 <_malloc_r>:
 8002a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a46:	2203      	movs	r2, #3
 8002a48:	1ccb      	adds	r3, r1, #3
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	0005      	movs	r5, r0
 8002a50:	001f      	movs	r7, r3
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d234      	bcs.n	8002ac0 <_malloc_r+0x7c>
 8002a56:	270c      	movs	r7, #12
 8002a58:	42b9      	cmp	r1, r7
 8002a5a:	d833      	bhi.n	8002ac4 <_malloc_r+0x80>
 8002a5c:	0028      	movs	r0, r5
 8002a5e:	f000 f871 	bl	8002b44 <__malloc_lock>
 8002a62:	4e37      	ldr	r6, [pc, #220]	@ (8002b40 <_malloc_r+0xfc>)
 8002a64:	6833      	ldr	r3, [r6, #0]
 8002a66:	001c      	movs	r4, r3
 8002a68:	2c00      	cmp	r4, #0
 8002a6a:	d12f      	bne.n	8002acc <_malloc_r+0x88>
 8002a6c:	0039      	movs	r1, r7
 8002a6e:	0028      	movs	r0, r5
 8002a70:	f7ff ffc6 	bl	8002a00 <sbrk_aligned>
 8002a74:	0004      	movs	r4, r0
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	d15f      	bne.n	8002b3a <_malloc_r+0xf6>
 8002a7a:	6834      	ldr	r4, [r6, #0]
 8002a7c:	9400      	str	r4, [sp, #0]
 8002a7e:	9b00      	ldr	r3, [sp, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d14a      	bne.n	8002b1a <_malloc_r+0xd6>
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d052      	beq.n	8002b2e <_malloc_r+0xea>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	0028      	movs	r0, r5
 8002a8c:	18e3      	adds	r3, r4, r3
 8002a8e:	9900      	ldr	r1, [sp, #0]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f000 fb57 	bl	8003144 <_sbrk_r>
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	4283      	cmp	r3, r0
 8002a9a:	d148      	bne.n	8002b2e <_malloc_r+0xea>
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	0028      	movs	r0, r5
 8002aa0:	1aff      	subs	r7, r7, r3
 8002aa2:	0039      	movs	r1, r7
 8002aa4:	f7ff ffac 	bl	8002a00 <sbrk_aligned>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	d040      	beq.n	8002b2e <_malloc_r+0xea>
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	19db      	adds	r3, r3, r7
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	6833      	ldr	r3, [r6, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	2a00      	cmp	r2, #0
 8002ab8:	d133      	bne.n	8002b22 <_malloc_r+0xde>
 8002aba:	9b00      	ldr	r3, [sp, #0]
 8002abc:	6033      	str	r3, [r6, #0]
 8002abe:	e019      	b.n	8002af4 <_malloc_r+0xb0>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	dac9      	bge.n	8002a58 <_malloc_r+0x14>
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002acc:	6821      	ldr	r1, [r4, #0]
 8002ace:	1bc9      	subs	r1, r1, r7
 8002ad0:	d420      	bmi.n	8002b14 <_malloc_r+0xd0>
 8002ad2:	290b      	cmp	r1, #11
 8002ad4:	d90a      	bls.n	8002aec <_malloc_r+0xa8>
 8002ad6:	19e2      	adds	r2, r4, r7
 8002ad8:	6027      	str	r7, [r4, #0]
 8002ada:	42a3      	cmp	r3, r4
 8002adc:	d104      	bne.n	8002ae8 <_malloc_r+0xa4>
 8002ade:	6032      	str	r2, [r6, #0]
 8002ae0:	6863      	ldr	r3, [r4, #4]
 8002ae2:	6011      	str	r1, [r2, #0]
 8002ae4:	6053      	str	r3, [r2, #4]
 8002ae6:	e005      	b.n	8002af4 <_malloc_r+0xb0>
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e7f9      	b.n	8002ae0 <_malloc_r+0x9c>
 8002aec:	6862      	ldr	r2, [r4, #4]
 8002aee:	42a3      	cmp	r3, r4
 8002af0:	d10e      	bne.n	8002b10 <_malloc_r+0xcc>
 8002af2:	6032      	str	r2, [r6, #0]
 8002af4:	0028      	movs	r0, r5
 8002af6:	f000 f82d 	bl	8002b54 <__malloc_unlock>
 8002afa:	0020      	movs	r0, r4
 8002afc:	2207      	movs	r2, #7
 8002afe:	300b      	adds	r0, #11
 8002b00:	1d23      	adds	r3, r4, #4
 8002b02:	4390      	bics	r0, r2
 8002b04:	1ac2      	subs	r2, r0, r3
 8002b06:	4298      	cmp	r0, r3
 8002b08:	d0df      	beq.n	8002aca <_malloc_r+0x86>
 8002b0a:	1a1b      	subs	r3, r3, r0
 8002b0c:	50a3      	str	r3, [r4, r2]
 8002b0e:	e7dc      	b.n	8002aca <_malloc_r+0x86>
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e7ef      	b.n	8002af4 <_malloc_r+0xb0>
 8002b14:	0023      	movs	r3, r4
 8002b16:	6864      	ldr	r4, [r4, #4]
 8002b18:	e7a6      	b.n	8002a68 <_malloc_r+0x24>
 8002b1a:	9c00      	ldr	r4, [sp, #0]
 8002b1c:	6863      	ldr	r3, [r4, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	e7ad      	b.n	8002a7e <_malloc_r+0x3a>
 8002b22:	001a      	movs	r2, r3
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	42a3      	cmp	r3, r4
 8002b28:	d1fb      	bne.n	8002b22 <_malloc_r+0xde>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e7da      	b.n	8002ae4 <_malloc_r+0xa0>
 8002b2e:	230c      	movs	r3, #12
 8002b30:	0028      	movs	r0, r5
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	f000 f80e 	bl	8002b54 <__malloc_unlock>
 8002b38:	e7c6      	b.n	8002ac8 <_malloc_r+0x84>
 8002b3a:	6007      	str	r7, [r0, #0]
 8002b3c:	e7da      	b.n	8002af4 <_malloc_r+0xb0>
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	2000024c 	.word	0x2000024c

08002b44 <__malloc_lock>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <__malloc_lock+0xc>)
 8002b48:	f7ff ff0e 	bl	8002968 <__retarget_lock_acquire_recursive>
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	20000244 	.word	0x20000244

08002b54 <__malloc_unlock>:
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <__malloc_unlock+0xc>)
 8002b58:	f7ff ff07 	bl	800296a <__retarget_lock_release_recursive>
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	20000244 	.word	0x20000244

08002b64 <__ssputs_r>:
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	688e      	ldr	r6, [r1, #8]
 8002b68:	b085      	sub	sp, #20
 8002b6a:	001f      	movs	r7, r3
 8002b6c:	000c      	movs	r4, r1
 8002b6e:	680b      	ldr	r3, [r1, #0]
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9203      	str	r2, [sp, #12]
 8002b74:	42be      	cmp	r6, r7
 8002b76:	d830      	bhi.n	8002bda <__ssputs_r+0x76>
 8002b78:	210c      	movs	r1, #12
 8002b7a:	5e62      	ldrsh	r2, [r4, r1]
 8002b7c:	2190      	movs	r1, #144	@ 0x90
 8002b7e:	00c9      	lsls	r1, r1, #3
 8002b80:	420a      	tst	r2, r1
 8002b82:	d028      	beq.n	8002bd6 <__ssputs_r+0x72>
 8002b84:	2003      	movs	r0, #3
 8002b86:	6921      	ldr	r1, [r4, #16]
 8002b88:	1a5b      	subs	r3, r3, r1
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	6963      	ldr	r3, [r4, #20]
 8002b8e:	4343      	muls	r3, r0
 8002b90:	9801      	ldr	r0, [sp, #4]
 8002b92:	0fdd      	lsrs	r5, r3, #31
 8002b94:	18ed      	adds	r5, r5, r3
 8002b96:	1c7b      	adds	r3, r7, #1
 8002b98:	181b      	adds	r3, r3, r0
 8002b9a:	106d      	asrs	r5, r5, #1
 8002b9c:	42ab      	cmp	r3, r5
 8002b9e:	d900      	bls.n	8002ba2 <__ssputs_r+0x3e>
 8002ba0:	001d      	movs	r5, r3
 8002ba2:	0552      	lsls	r2, r2, #21
 8002ba4:	d528      	bpl.n	8002bf8 <__ssputs_r+0x94>
 8002ba6:	0029      	movs	r1, r5
 8002ba8:	9802      	ldr	r0, [sp, #8]
 8002baa:	f7ff ff4b 	bl	8002a44 <_malloc_r>
 8002bae:	1e06      	subs	r6, r0, #0
 8002bb0:	d02c      	beq.n	8002c0c <__ssputs_r+0xa8>
 8002bb2:	9a01      	ldr	r2, [sp, #4]
 8002bb4:	6921      	ldr	r1, [r4, #16]
 8002bb6:	f000 fae2 	bl	800317e <memcpy>
 8002bba:	89a2      	ldrh	r2, [r4, #12]
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <__ssputs_r+0xbc>)
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	6126      	str	r6, [r4, #16]
 8002bca:	18f6      	adds	r6, r6, r3
 8002bcc:	6026      	str	r6, [r4, #0]
 8002bce:	003e      	movs	r6, r7
 8002bd0:	6165      	str	r5, [r4, #20]
 8002bd2:	1aed      	subs	r5, r5, r3
 8002bd4:	60a5      	str	r5, [r4, #8]
 8002bd6:	42be      	cmp	r6, r7
 8002bd8:	d900      	bls.n	8002bdc <__ssputs_r+0x78>
 8002bda:	003e      	movs	r6, r7
 8002bdc:	0032      	movs	r2, r6
 8002bde:	9903      	ldr	r1, [sp, #12]
 8002be0:	6820      	ldr	r0, [r4, #0]
 8002be2:	f000 fa9b 	bl	800311c <memmove>
 8002be6:	2000      	movs	r0, #0
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	1b9b      	subs	r3, r3, r6
 8002bec:	60a3      	str	r3, [r4, #8]
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	199b      	adds	r3, r3, r6
 8002bf2:	6023      	str	r3, [r4, #0]
 8002bf4:	b005      	add	sp, #20
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf8:	002a      	movs	r2, r5
 8002bfa:	9802      	ldr	r0, [sp, #8]
 8002bfc:	f000 fac8 	bl	8003190 <_realloc_r>
 8002c00:	1e06      	subs	r6, r0, #0
 8002c02:	d1e0      	bne.n	8002bc6 <__ssputs_r+0x62>
 8002c04:	6921      	ldr	r1, [r4, #16]
 8002c06:	9802      	ldr	r0, [sp, #8]
 8002c08:	f7ff feb0 	bl	800296c <_free_r>
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	2001      	movs	r0, #1
 8002c10:	9a02      	ldr	r2, [sp, #8]
 8002c12:	4240      	negs	r0, r0
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	89a2      	ldrh	r2, [r4, #12]
 8002c18:	3334      	adds	r3, #52	@ 0x34
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e7e9      	b.n	8002bf4 <__ssputs_r+0x90>
 8002c20:	fffffb7f 	.word	0xfffffb7f

08002c24 <_svfiprintf_r>:
 8002c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c26:	b0a1      	sub	sp, #132	@ 0x84
 8002c28:	9003      	str	r0, [sp, #12]
 8002c2a:	001d      	movs	r5, r3
 8002c2c:	898b      	ldrh	r3, [r1, #12]
 8002c2e:	000f      	movs	r7, r1
 8002c30:	0016      	movs	r6, r2
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	d511      	bpl.n	8002c5a <_svfiprintf_r+0x36>
 8002c36:	690b      	ldr	r3, [r1, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <_svfiprintf_r+0x36>
 8002c3c:	2140      	movs	r1, #64	@ 0x40
 8002c3e:	f7ff ff01 	bl	8002a44 <_malloc_r>
 8002c42:	6038      	str	r0, [r7, #0]
 8002c44:	6138      	str	r0, [r7, #16]
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d105      	bne.n	8002c56 <_svfiprintf_r+0x32>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	9a03      	ldr	r2, [sp, #12]
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	2001      	movs	r0, #1
 8002c52:	4240      	negs	r0, r0
 8002c54:	e0cf      	b.n	8002df6 <_svfiprintf_r+0x1d2>
 8002c56:	2340      	movs	r3, #64	@ 0x40
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	ac08      	add	r4, sp, #32
 8002c5e:	6163      	str	r3, [r4, #20]
 8002c60:	3320      	adds	r3, #32
 8002c62:	7663      	strb	r3, [r4, #25]
 8002c64:	3310      	adds	r3, #16
 8002c66:	76a3      	strb	r3, [r4, #26]
 8002c68:	9507      	str	r5, [sp, #28]
 8002c6a:	0035      	movs	r5, r6
 8002c6c:	782b      	ldrb	r3, [r5, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <_svfiprintf_r+0x52>
 8002c72:	2b25      	cmp	r3, #37	@ 0x25
 8002c74:	d148      	bne.n	8002d08 <_svfiprintf_r+0xe4>
 8002c76:	1bab      	subs	r3, r5, r6
 8002c78:	9305      	str	r3, [sp, #20]
 8002c7a:	42b5      	cmp	r5, r6
 8002c7c:	d00b      	beq.n	8002c96 <_svfiprintf_r+0x72>
 8002c7e:	0032      	movs	r2, r6
 8002c80:	0039      	movs	r1, r7
 8002c82:	9803      	ldr	r0, [sp, #12]
 8002c84:	f7ff ff6e 	bl	8002b64 <__ssputs_r>
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d100      	bne.n	8002c8e <_svfiprintf_r+0x6a>
 8002c8c:	e0ae      	b.n	8002dec <_svfiprintf_r+0x1c8>
 8002c8e:	6963      	ldr	r3, [r4, #20]
 8002c90:	9a05      	ldr	r2, [sp, #20]
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	6163      	str	r3, [r4, #20]
 8002c96:	782b      	ldrb	r3, [r5, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <_svfiprintf_r+0x7a>
 8002c9c:	e0a6      	b.n	8002dec <_svfiprintf_r+0x1c8>
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	4252      	negs	r2, r2
 8002ca4:	6062      	str	r2, [r4, #4]
 8002ca6:	a904      	add	r1, sp, #16
 8002ca8:	3254      	adds	r2, #84	@ 0x54
 8002caa:	1852      	adds	r2, r2, r1
 8002cac:	1c6e      	adds	r6, r5, #1
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	60e3      	str	r3, [r4, #12]
 8002cb2:	60a3      	str	r3, [r4, #8]
 8002cb4:	7013      	strb	r3, [r2, #0]
 8002cb6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002cb8:	4b54      	ldr	r3, [pc, #336]	@ (8002e0c <_svfiprintf_r+0x1e8>)
 8002cba:	2205      	movs	r2, #5
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	7831      	ldrb	r1, [r6, #0]
 8002cc0:	9305      	str	r3, [sp, #20]
 8002cc2:	f000 fa51 	bl	8003168 <memchr>
 8002cc6:	1c75      	adds	r5, r6, #1
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	d11f      	bne.n	8002d0c <_svfiprintf_r+0xe8>
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	06d3      	lsls	r3, r2, #27
 8002cd0:	d504      	bpl.n	8002cdc <_svfiprintf_r+0xb8>
 8002cd2:	2353      	movs	r3, #83	@ 0x53
 8002cd4:	a904      	add	r1, sp, #16
 8002cd6:	185b      	adds	r3, r3, r1
 8002cd8:	2120      	movs	r1, #32
 8002cda:	7019      	strb	r1, [r3, #0]
 8002cdc:	0713      	lsls	r3, r2, #28
 8002cde:	d504      	bpl.n	8002cea <_svfiprintf_r+0xc6>
 8002ce0:	2353      	movs	r3, #83	@ 0x53
 8002ce2:	a904      	add	r1, sp, #16
 8002ce4:	185b      	adds	r3, r3, r1
 8002ce6:	212b      	movs	r1, #43	@ 0x2b
 8002ce8:	7019      	strb	r1, [r3, #0]
 8002cea:	7833      	ldrb	r3, [r6, #0]
 8002cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cee:	d016      	beq.n	8002d1e <_svfiprintf_r+0xfa>
 8002cf0:	0035      	movs	r5, r6
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	200a      	movs	r0, #10
 8002cf6:	68e3      	ldr	r3, [r4, #12]
 8002cf8:	782a      	ldrb	r2, [r5, #0]
 8002cfa:	1c6e      	adds	r6, r5, #1
 8002cfc:	3a30      	subs	r2, #48	@ 0x30
 8002cfe:	2a09      	cmp	r2, #9
 8002d00:	d950      	bls.n	8002da4 <_svfiprintf_r+0x180>
 8002d02:	2900      	cmp	r1, #0
 8002d04:	d111      	bne.n	8002d2a <_svfiprintf_r+0x106>
 8002d06:	e017      	b.n	8002d38 <_svfiprintf_r+0x114>
 8002d08:	3501      	adds	r5, #1
 8002d0a:	e7af      	b.n	8002c6c <_svfiprintf_r+0x48>
 8002d0c:	9b05      	ldr	r3, [sp, #20]
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	1ac0      	subs	r0, r0, r3
 8002d12:	2301      	movs	r3, #1
 8002d14:	4083      	lsls	r3, r0
 8002d16:	4313      	orrs	r3, r2
 8002d18:	002e      	movs	r6, r5
 8002d1a:	6023      	str	r3, [r4, #0]
 8002d1c:	e7cc      	b.n	8002cb8 <_svfiprintf_r+0x94>
 8002d1e:	9b07      	ldr	r3, [sp, #28]
 8002d20:	1d19      	adds	r1, r3, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	9107      	str	r1, [sp, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db01      	blt.n	8002d2e <_svfiprintf_r+0x10a>
 8002d2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d2c:	e004      	b.n	8002d38 <_svfiprintf_r+0x114>
 8002d2e:	425b      	negs	r3, r3
 8002d30:	60e3      	str	r3, [r4, #12]
 8002d32:	2302      	movs	r3, #2
 8002d34:	4313      	orrs	r3, r2
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	782b      	ldrb	r3, [r5, #0]
 8002d3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d3c:	d10c      	bne.n	8002d58 <_svfiprintf_r+0x134>
 8002d3e:	786b      	ldrb	r3, [r5, #1]
 8002d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d42:	d134      	bne.n	8002dae <_svfiprintf_r+0x18a>
 8002d44:	9b07      	ldr	r3, [sp, #28]
 8002d46:	3502      	adds	r5, #2
 8002d48:	1d1a      	adds	r2, r3, #4
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	9207      	str	r2, [sp, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	da01      	bge.n	8002d56 <_svfiprintf_r+0x132>
 8002d52:	2301      	movs	r3, #1
 8002d54:	425b      	negs	r3, r3
 8002d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d58:	4e2d      	ldr	r6, [pc, #180]	@ (8002e10 <_svfiprintf_r+0x1ec>)
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	0030      	movs	r0, r6
 8002d5e:	7829      	ldrb	r1, [r5, #0]
 8002d60:	f000 fa02 	bl	8003168 <memchr>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d006      	beq.n	8002d76 <_svfiprintf_r+0x152>
 8002d68:	2340      	movs	r3, #64	@ 0x40
 8002d6a:	1b80      	subs	r0, r0, r6
 8002d6c:	4083      	lsls	r3, r0
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	3501      	adds	r5, #1
 8002d72:	4313      	orrs	r3, r2
 8002d74:	6023      	str	r3, [r4, #0]
 8002d76:	7829      	ldrb	r1, [r5, #0]
 8002d78:	2206      	movs	r2, #6
 8002d7a:	4826      	ldr	r0, [pc, #152]	@ (8002e14 <_svfiprintf_r+0x1f0>)
 8002d7c:	1c6e      	adds	r6, r5, #1
 8002d7e:	7621      	strb	r1, [r4, #24]
 8002d80:	f000 f9f2 	bl	8003168 <memchr>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d038      	beq.n	8002dfa <_svfiprintf_r+0x1d6>
 8002d88:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <_svfiprintf_r+0x1f4>)
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d122      	bne.n	8002dd4 <_svfiprintf_r+0x1b0>
 8002d8e:	2207      	movs	r2, #7
 8002d90:	9b07      	ldr	r3, [sp, #28]
 8002d92:	3307      	adds	r3, #7
 8002d94:	4393      	bics	r3, r2
 8002d96:	3308      	adds	r3, #8
 8002d98:	9307      	str	r3, [sp, #28]
 8002d9a:	6963      	ldr	r3, [r4, #20]
 8002d9c:	9a04      	ldr	r2, [sp, #16]
 8002d9e:	189b      	adds	r3, r3, r2
 8002da0:	6163      	str	r3, [r4, #20]
 8002da2:	e762      	b.n	8002c6a <_svfiprintf_r+0x46>
 8002da4:	4343      	muls	r3, r0
 8002da6:	0035      	movs	r5, r6
 8002da8:	2101      	movs	r1, #1
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	e7a4      	b.n	8002cf8 <_svfiprintf_r+0xd4>
 8002dae:	2300      	movs	r3, #0
 8002db0:	200a      	movs	r0, #10
 8002db2:	0019      	movs	r1, r3
 8002db4:	3501      	adds	r5, #1
 8002db6:	6063      	str	r3, [r4, #4]
 8002db8:	782a      	ldrb	r2, [r5, #0]
 8002dba:	1c6e      	adds	r6, r5, #1
 8002dbc:	3a30      	subs	r2, #48	@ 0x30
 8002dbe:	2a09      	cmp	r2, #9
 8002dc0:	d903      	bls.n	8002dca <_svfiprintf_r+0x1a6>
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0c8      	beq.n	8002d58 <_svfiprintf_r+0x134>
 8002dc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8002dc8:	e7c6      	b.n	8002d58 <_svfiprintf_r+0x134>
 8002dca:	4341      	muls	r1, r0
 8002dcc:	0035      	movs	r5, r6
 8002dce:	2301      	movs	r3, #1
 8002dd0:	1889      	adds	r1, r1, r2
 8002dd2:	e7f1      	b.n	8002db8 <_svfiprintf_r+0x194>
 8002dd4:	aa07      	add	r2, sp, #28
 8002dd6:	9200      	str	r2, [sp, #0]
 8002dd8:	0021      	movs	r1, r4
 8002dda:	003a      	movs	r2, r7
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <_svfiprintf_r+0x1f8>)
 8002dde:	9803      	ldr	r0, [sp, #12]
 8002de0:	e000      	b.n	8002de4 <_svfiprintf_r+0x1c0>
 8002de2:	bf00      	nop
 8002de4:	9004      	str	r0, [sp, #16]
 8002de6:	9b04      	ldr	r3, [sp, #16]
 8002de8:	3301      	adds	r3, #1
 8002dea:	d1d6      	bne.n	8002d9a <_svfiprintf_r+0x176>
 8002dec:	89bb      	ldrh	r3, [r7, #12]
 8002dee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002df0:	065b      	lsls	r3, r3, #25
 8002df2:	d500      	bpl.n	8002df6 <_svfiprintf_r+0x1d2>
 8002df4:	e72c      	b.n	8002c50 <_svfiprintf_r+0x2c>
 8002df6:	b021      	add	sp, #132	@ 0x84
 8002df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfa:	aa07      	add	r2, sp, #28
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	0021      	movs	r1, r4
 8002e00:	003a      	movs	r2, r7
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <_svfiprintf_r+0x1f8>)
 8002e04:	9803      	ldr	r0, [sp, #12]
 8002e06:	f000 f87b 	bl	8002f00 <_printf_i>
 8002e0a:	e7eb      	b.n	8002de4 <_svfiprintf_r+0x1c0>
 8002e0c:	080032a4 	.word	0x080032a4
 8002e10:	080032aa 	.word	0x080032aa
 8002e14:	080032ae 	.word	0x080032ae
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	08002b65 	.word	0x08002b65

08002e20 <_printf_common>:
 8002e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e22:	0016      	movs	r6, r2
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	688a      	ldr	r2, [r1, #8]
 8002e28:	690b      	ldr	r3, [r1, #16]
 8002e2a:	000c      	movs	r4, r1
 8002e2c:	9000      	str	r0, [sp, #0]
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	da00      	bge.n	8002e34 <_printf_common+0x14>
 8002e32:	0013      	movs	r3, r2
 8002e34:	0022      	movs	r2, r4
 8002e36:	6033      	str	r3, [r6, #0]
 8002e38:	3243      	adds	r2, #67	@ 0x43
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d001      	beq.n	8002e44 <_printf_common+0x24>
 8002e40:	3301      	adds	r3, #1
 8002e42:	6033      	str	r3, [r6, #0]
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	069b      	lsls	r3, r3, #26
 8002e48:	d502      	bpl.n	8002e50 <_printf_common+0x30>
 8002e4a:	6833      	ldr	r3, [r6, #0]
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	6822      	ldr	r2, [r4, #0]
 8002e52:	2306      	movs	r3, #6
 8002e54:	0015      	movs	r5, r2
 8002e56:	401d      	ands	r5, r3
 8002e58:	421a      	tst	r2, r3
 8002e5a:	d027      	beq.n	8002eac <_printf_common+0x8c>
 8002e5c:	0023      	movs	r3, r4
 8002e5e:	3343      	adds	r3, #67	@ 0x43
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	4193      	sbcs	r3, r2
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	0692      	lsls	r2, r2, #26
 8002e6a:	d430      	bmi.n	8002ece <_printf_common+0xae>
 8002e6c:	0022      	movs	r2, r4
 8002e6e:	9901      	ldr	r1, [sp, #4]
 8002e70:	9800      	ldr	r0, [sp, #0]
 8002e72:	9d08      	ldr	r5, [sp, #32]
 8002e74:	3243      	adds	r2, #67	@ 0x43
 8002e76:	47a8      	blx	r5
 8002e78:	3001      	adds	r0, #1
 8002e7a:	d025      	beq.n	8002ec8 <_printf_common+0xa8>
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	2500      	movs	r5, #0
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d105      	bne.n	8002e94 <_printf_common+0x74>
 8002e88:	6833      	ldr	r3, [r6, #0]
 8002e8a:	68e5      	ldr	r5, [r4, #12]
 8002e8c:	1aed      	subs	r5, r5, r3
 8002e8e:	43eb      	mvns	r3, r5
 8002e90:	17db      	asrs	r3, r3, #31
 8002e92:	401d      	ands	r5, r3
 8002e94:	68a3      	ldr	r3, [r4, #8]
 8002e96:	6922      	ldr	r2, [r4, #16]
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	dd01      	ble.n	8002ea0 <_printf_common+0x80>
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	18ed      	adds	r5, r5, r3
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	42b5      	cmp	r5, r6
 8002ea4:	d120      	bne.n	8002ee8 <_printf_common+0xc8>
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	e010      	b.n	8002ecc <_printf_common+0xac>
 8002eaa:	3501      	adds	r5, #1
 8002eac:	68e3      	ldr	r3, [r4, #12]
 8002eae:	6832      	ldr	r2, [r6, #0]
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	42ab      	cmp	r3, r5
 8002eb4:	ddd2      	ble.n	8002e5c <_printf_common+0x3c>
 8002eb6:	0022      	movs	r2, r4
 8002eb8:	2301      	movs	r3, #1
 8002eba:	9901      	ldr	r1, [sp, #4]
 8002ebc:	9800      	ldr	r0, [sp, #0]
 8002ebe:	9f08      	ldr	r7, [sp, #32]
 8002ec0:	3219      	adds	r2, #25
 8002ec2:	47b8      	blx	r7
 8002ec4:	3001      	adds	r0, #1
 8002ec6:	d1f0      	bne.n	8002eaa <_printf_common+0x8a>
 8002ec8:	2001      	movs	r0, #1
 8002eca:	4240      	negs	r0, r0
 8002ecc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ece:	2030      	movs	r0, #48	@ 0x30
 8002ed0:	18e1      	adds	r1, r4, r3
 8002ed2:	3143      	adds	r1, #67	@ 0x43
 8002ed4:	7008      	strb	r0, [r1, #0]
 8002ed6:	0021      	movs	r1, r4
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	3145      	adds	r1, #69	@ 0x45
 8002edc:	7809      	ldrb	r1, [r1, #0]
 8002ede:	18a2      	adds	r2, r4, r2
 8002ee0:	3243      	adds	r2, #67	@ 0x43
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	7011      	strb	r1, [r2, #0]
 8002ee6:	e7c1      	b.n	8002e6c <_printf_common+0x4c>
 8002ee8:	0022      	movs	r2, r4
 8002eea:	2301      	movs	r3, #1
 8002eec:	9901      	ldr	r1, [sp, #4]
 8002eee:	9800      	ldr	r0, [sp, #0]
 8002ef0:	9f08      	ldr	r7, [sp, #32]
 8002ef2:	321a      	adds	r2, #26
 8002ef4:	47b8      	blx	r7
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d0e6      	beq.n	8002ec8 <_printf_common+0xa8>
 8002efa:	3601      	adds	r6, #1
 8002efc:	e7d1      	b.n	8002ea2 <_printf_common+0x82>
	...

08002f00 <_printf_i>:
 8002f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f02:	b08b      	sub	sp, #44	@ 0x2c
 8002f04:	9206      	str	r2, [sp, #24]
 8002f06:	000a      	movs	r2, r1
 8002f08:	3243      	adds	r2, #67	@ 0x43
 8002f0a:	9307      	str	r3, [sp, #28]
 8002f0c:	9005      	str	r0, [sp, #20]
 8002f0e:	9203      	str	r2, [sp, #12]
 8002f10:	7e0a      	ldrb	r2, [r1, #24]
 8002f12:	000c      	movs	r4, r1
 8002f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002f16:	2a78      	cmp	r2, #120	@ 0x78
 8002f18:	d809      	bhi.n	8002f2e <_printf_i+0x2e>
 8002f1a:	2a62      	cmp	r2, #98	@ 0x62
 8002f1c:	d80b      	bhi.n	8002f36 <_printf_i+0x36>
 8002f1e:	2a00      	cmp	r2, #0
 8002f20:	d100      	bne.n	8002f24 <_printf_i+0x24>
 8002f22:	e0bc      	b.n	800309e <_printf_i+0x19e>
 8002f24:	497b      	ldr	r1, [pc, #492]	@ (8003114 <_printf_i+0x214>)
 8002f26:	9104      	str	r1, [sp, #16]
 8002f28:	2a58      	cmp	r2, #88	@ 0x58
 8002f2a:	d100      	bne.n	8002f2e <_printf_i+0x2e>
 8002f2c:	e090      	b.n	8003050 <_printf_i+0x150>
 8002f2e:	0025      	movs	r5, r4
 8002f30:	3542      	adds	r5, #66	@ 0x42
 8002f32:	702a      	strb	r2, [r5, #0]
 8002f34:	e022      	b.n	8002f7c <_printf_i+0x7c>
 8002f36:	0010      	movs	r0, r2
 8002f38:	3863      	subs	r0, #99	@ 0x63
 8002f3a:	2815      	cmp	r0, #21
 8002f3c:	d8f7      	bhi.n	8002f2e <_printf_i+0x2e>
 8002f3e:	f7fd f8e3 	bl	8000108 <__gnu_thumb1_case_shi>
 8002f42:	0016      	.short	0x0016
 8002f44:	fff6001f 	.word	0xfff6001f
 8002f48:	fff6fff6 	.word	0xfff6fff6
 8002f4c:	001ffff6 	.word	0x001ffff6
 8002f50:	fff6fff6 	.word	0xfff6fff6
 8002f54:	fff6fff6 	.word	0xfff6fff6
 8002f58:	003600a1 	.word	0x003600a1
 8002f5c:	fff60080 	.word	0xfff60080
 8002f60:	00b2fff6 	.word	0x00b2fff6
 8002f64:	0036fff6 	.word	0x0036fff6
 8002f68:	fff6fff6 	.word	0xfff6fff6
 8002f6c:	0084      	.short	0x0084
 8002f6e:	0025      	movs	r5, r4
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	3542      	adds	r5, #66	@ 0x42
 8002f74:	1d11      	adds	r1, r2, #4
 8002f76:	6019      	str	r1, [r3, #0]
 8002f78:	6813      	ldr	r3, [r2, #0]
 8002f7a:	702b      	strb	r3, [r5, #0]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0a0      	b.n	80030c2 <_printf_i+0x1c2>
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	6809      	ldr	r1, [r1, #0]
 8002f84:	1d02      	adds	r2, r0, #4
 8002f86:	060d      	lsls	r5, r1, #24
 8002f88:	d50b      	bpl.n	8002fa2 <_printf_i+0xa2>
 8002f8a:	6806      	ldr	r6, [r0, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	2e00      	cmp	r6, #0
 8002f90:	da03      	bge.n	8002f9a <_printf_i+0x9a>
 8002f92:	232d      	movs	r3, #45	@ 0x2d
 8002f94:	9a03      	ldr	r2, [sp, #12]
 8002f96:	4276      	negs	r6, r6
 8002f98:	7013      	strb	r3, [r2, #0]
 8002f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003114 <_printf_i+0x214>)
 8002f9c:	270a      	movs	r7, #10
 8002f9e:	9304      	str	r3, [sp, #16]
 8002fa0:	e018      	b.n	8002fd4 <_printf_i+0xd4>
 8002fa2:	6806      	ldr	r6, [r0, #0]
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	0649      	lsls	r1, r1, #25
 8002fa8:	d5f1      	bpl.n	8002f8e <_printf_i+0x8e>
 8002faa:	b236      	sxth	r6, r6
 8002fac:	e7ef      	b.n	8002f8e <_printf_i+0x8e>
 8002fae:	6808      	ldr	r0, [r1, #0]
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	c940      	ldmia	r1!, {r6}
 8002fb4:	0605      	lsls	r5, r0, #24
 8002fb6:	d402      	bmi.n	8002fbe <_printf_i+0xbe>
 8002fb8:	0640      	lsls	r0, r0, #25
 8002fba:	d500      	bpl.n	8002fbe <_printf_i+0xbe>
 8002fbc:	b2b6      	uxth	r6, r6
 8002fbe:	6019      	str	r1, [r3, #0]
 8002fc0:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <_printf_i+0x214>)
 8002fc2:	270a      	movs	r7, #10
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	2a6f      	cmp	r2, #111	@ 0x6f
 8002fc8:	d100      	bne.n	8002fcc <_printf_i+0xcc>
 8002fca:	3f02      	subs	r7, #2
 8002fcc:	0023      	movs	r3, r4
 8002fce:	2200      	movs	r2, #0
 8002fd0:	3343      	adds	r3, #67	@ 0x43
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	60a3      	str	r3, [r4, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db03      	blt.n	8002fe4 <_printf_i+0xe4>
 8002fdc:	2104      	movs	r1, #4
 8002fde:	6822      	ldr	r2, [r4, #0]
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	2e00      	cmp	r6, #0
 8002fe6:	d102      	bne.n	8002fee <_printf_i+0xee>
 8002fe8:	9d03      	ldr	r5, [sp, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <_printf_i+0x108>
 8002fee:	9d03      	ldr	r5, [sp, #12]
 8002ff0:	0030      	movs	r0, r6
 8002ff2:	0039      	movs	r1, r7
 8002ff4:	f7fd f918 	bl	8000228 <__aeabi_uidivmod>
 8002ff8:	9b04      	ldr	r3, [sp, #16]
 8002ffa:	3d01      	subs	r5, #1
 8002ffc:	5c5b      	ldrb	r3, [r3, r1]
 8002ffe:	702b      	strb	r3, [r5, #0]
 8003000:	0033      	movs	r3, r6
 8003002:	0006      	movs	r6, r0
 8003004:	429f      	cmp	r7, r3
 8003006:	d9f3      	bls.n	8002ff0 <_printf_i+0xf0>
 8003008:	2f08      	cmp	r7, #8
 800300a:	d109      	bne.n	8003020 <_printf_i+0x120>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	07db      	lsls	r3, r3, #31
 8003010:	d506      	bpl.n	8003020 <_printf_i+0x120>
 8003012:	6862      	ldr	r2, [r4, #4]
 8003014:	6923      	ldr	r3, [r4, #16]
 8003016:	429a      	cmp	r2, r3
 8003018:	dc02      	bgt.n	8003020 <_printf_i+0x120>
 800301a:	2330      	movs	r3, #48	@ 0x30
 800301c:	3d01      	subs	r5, #1
 800301e:	702b      	strb	r3, [r5, #0]
 8003020:	9b03      	ldr	r3, [sp, #12]
 8003022:	1b5b      	subs	r3, r3, r5
 8003024:	6123      	str	r3, [r4, #16]
 8003026:	9b07      	ldr	r3, [sp, #28]
 8003028:	0021      	movs	r1, r4
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	9805      	ldr	r0, [sp, #20]
 800302e:	9b06      	ldr	r3, [sp, #24]
 8003030:	aa09      	add	r2, sp, #36	@ 0x24
 8003032:	f7ff fef5 	bl	8002e20 <_printf_common>
 8003036:	3001      	adds	r0, #1
 8003038:	d148      	bne.n	80030cc <_printf_i+0x1cc>
 800303a:	2001      	movs	r0, #1
 800303c:	4240      	negs	r0, r0
 800303e:	b00b      	add	sp, #44	@ 0x2c
 8003040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003042:	2220      	movs	r2, #32
 8003044:	6809      	ldr	r1, [r1, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	6022      	str	r2, [r4, #0]
 800304a:	2278      	movs	r2, #120	@ 0x78
 800304c:	4932      	ldr	r1, [pc, #200]	@ (8003118 <_printf_i+0x218>)
 800304e:	9104      	str	r1, [sp, #16]
 8003050:	0021      	movs	r1, r4
 8003052:	3145      	adds	r1, #69	@ 0x45
 8003054:	700a      	strb	r2, [r1, #0]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	c940      	ldmia	r1!, {r6}
 800305c:	0610      	lsls	r0, r2, #24
 800305e:	d402      	bmi.n	8003066 <_printf_i+0x166>
 8003060:	0650      	lsls	r0, r2, #25
 8003062:	d500      	bpl.n	8003066 <_printf_i+0x166>
 8003064:	b2b6      	uxth	r6, r6
 8003066:	6019      	str	r1, [r3, #0]
 8003068:	07d3      	lsls	r3, r2, #31
 800306a:	d502      	bpl.n	8003072 <_printf_i+0x172>
 800306c:	2320      	movs	r3, #32
 800306e:	4313      	orrs	r3, r2
 8003070:	6023      	str	r3, [r4, #0]
 8003072:	2e00      	cmp	r6, #0
 8003074:	d001      	beq.n	800307a <_printf_i+0x17a>
 8003076:	2710      	movs	r7, #16
 8003078:	e7a8      	b.n	8002fcc <_printf_i+0xcc>
 800307a:	2220      	movs	r2, #32
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	4393      	bics	r3, r2
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	e7f8      	b.n	8003076 <_printf_i+0x176>
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	680d      	ldr	r5, [r1, #0]
 8003088:	1d10      	adds	r0, r2, #4
 800308a:	6949      	ldr	r1, [r1, #20]
 800308c:	6018      	str	r0, [r3, #0]
 800308e:	6813      	ldr	r3, [r2, #0]
 8003090:	062e      	lsls	r6, r5, #24
 8003092:	d501      	bpl.n	8003098 <_printf_i+0x198>
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	e002      	b.n	800309e <_printf_i+0x19e>
 8003098:	066d      	lsls	r5, r5, #25
 800309a:	d5fb      	bpl.n	8003094 <_printf_i+0x194>
 800309c:	8019      	strh	r1, [r3, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	9d03      	ldr	r5, [sp, #12]
 80030a2:	6123      	str	r3, [r4, #16]
 80030a4:	e7bf      	b.n	8003026 <_printf_i+0x126>
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	1d11      	adds	r1, r2, #4
 80030aa:	6019      	str	r1, [r3, #0]
 80030ac:	6815      	ldr	r5, [r2, #0]
 80030ae:	2100      	movs	r1, #0
 80030b0:	0028      	movs	r0, r5
 80030b2:	6862      	ldr	r2, [r4, #4]
 80030b4:	f000 f858 	bl	8003168 <memchr>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d001      	beq.n	80030c0 <_printf_i+0x1c0>
 80030bc:	1b40      	subs	r0, r0, r5
 80030be:	6060      	str	r0, [r4, #4]
 80030c0:	6863      	ldr	r3, [r4, #4]
 80030c2:	6123      	str	r3, [r4, #16]
 80030c4:	2300      	movs	r3, #0
 80030c6:	9a03      	ldr	r2, [sp, #12]
 80030c8:	7013      	strb	r3, [r2, #0]
 80030ca:	e7ac      	b.n	8003026 <_printf_i+0x126>
 80030cc:	002a      	movs	r2, r5
 80030ce:	6923      	ldr	r3, [r4, #16]
 80030d0:	9906      	ldr	r1, [sp, #24]
 80030d2:	9805      	ldr	r0, [sp, #20]
 80030d4:	9d07      	ldr	r5, [sp, #28]
 80030d6:	47a8      	blx	r5
 80030d8:	3001      	adds	r0, #1
 80030da:	d0ae      	beq.n	800303a <_printf_i+0x13a>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	079b      	lsls	r3, r3, #30
 80030e0:	d415      	bmi.n	800310e <_printf_i+0x20e>
 80030e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030e4:	68e0      	ldr	r0, [r4, #12]
 80030e6:	4298      	cmp	r0, r3
 80030e8:	daa9      	bge.n	800303e <_printf_i+0x13e>
 80030ea:	0018      	movs	r0, r3
 80030ec:	e7a7      	b.n	800303e <_printf_i+0x13e>
 80030ee:	0022      	movs	r2, r4
 80030f0:	2301      	movs	r3, #1
 80030f2:	9906      	ldr	r1, [sp, #24]
 80030f4:	9805      	ldr	r0, [sp, #20]
 80030f6:	9e07      	ldr	r6, [sp, #28]
 80030f8:	3219      	adds	r2, #25
 80030fa:	47b0      	blx	r6
 80030fc:	3001      	adds	r0, #1
 80030fe:	d09c      	beq.n	800303a <_printf_i+0x13a>
 8003100:	3501      	adds	r5, #1
 8003102:	68e3      	ldr	r3, [r4, #12]
 8003104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	42ab      	cmp	r3, r5
 800310a:	dcf0      	bgt.n	80030ee <_printf_i+0x1ee>
 800310c:	e7e9      	b.n	80030e2 <_printf_i+0x1e2>
 800310e:	2500      	movs	r5, #0
 8003110:	e7f7      	b.n	8003102 <_printf_i+0x202>
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	080032b5 	.word	0x080032b5
 8003118:	080032c6 	.word	0x080032c6

0800311c <memmove>:
 800311c:	b510      	push	{r4, lr}
 800311e:	4288      	cmp	r0, r1
 8003120:	d806      	bhi.n	8003130 <memmove+0x14>
 8003122:	2300      	movs	r3, #0
 8003124:	429a      	cmp	r2, r3
 8003126:	d008      	beq.n	800313a <memmove+0x1e>
 8003128:	5ccc      	ldrb	r4, [r1, r3]
 800312a:	54c4      	strb	r4, [r0, r3]
 800312c:	3301      	adds	r3, #1
 800312e:	e7f9      	b.n	8003124 <memmove+0x8>
 8003130:	188b      	adds	r3, r1, r2
 8003132:	4298      	cmp	r0, r3
 8003134:	d2f5      	bcs.n	8003122 <memmove+0x6>
 8003136:	3a01      	subs	r2, #1
 8003138:	d200      	bcs.n	800313c <memmove+0x20>
 800313a:	bd10      	pop	{r4, pc}
 800313c:	5c8b      	ldrb	r3, [r1, r2]
 800313e:	5483      	strb	r3, [r0, r2]
 8003140:	e7f9      	b.n	8003136 <memmove+0x1a>
	...

08003144 <_sbrk_r>:
 8003144:	2300      	movs	r3, #0
 8003146:	b570      	push	{r4, r5, r6, lr}
 8003148:	4d06      	ldr	r5, [pc, #24]	@ (8003164 <_sbrk_r+0x20>)
 800314a:	0004      	movs	r4, r0
 800314c:	0008      	movs	r0, r1
 800314e:	602b      	str	r3, [r5, #0]
 8003150:	f7fd fb5e 	bl	8000810 <_sbrk>
 8003154:	1c43      	adds	r3, r0, #1
 8003156:	d103      	bne.n	8003160 <_sbrk_r+0x1c>
 8003158:	682b      	ldr	r3, [r5, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d000      	beq.n	8003160 <_sbrk_r+0x1c>
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	20000240 	.word	0x20000240

08003168 <memchr>:
 8003168:	b2c9      	uxtb	r1, r1
 800316a:	1882      	adds	r2, r0, r2
 800316c:	4290      	cmp	r0, r2
 800316e:	d101      	bne.n	8003174 <memchr+0xc>
 8003170:	2000      	movs	r0, #0
 8003172:	4770      	bx	lr
 8003174:	7803      	ldrb	r3, [r0, #0]
 8003176:	428b      	cmp	r3, r1
 8003178:	d0fb      	beq.n	8003172 <memchr+0xa>
 800317a:	3001      	adds	r0, #1
 800317c:	e7f6      	b.n	800316c <memchr+0x4>

0800317e <memcpy>:
 800317e:	2300      	movs	r3, #0
 8003180:	b510      	push	{r4, lr}
 8003182:	429a      	cmp	r2, r3
 8003184:	d100      	bne.n	8003188 <memcpy+0xa>
 8003186:	bd10      	pop	{r4, pc}
 8003188:	5ccc      	ldrb	r4, [r1, r3]
 800318a:	54c4      	strb	r4, [r0, r3]
 800318c:	3301      	adds	r3, #1
 800318e:	e7f8      	b.n	8003182 <memcpy+0x4>

08003190 <_realloc_r>:
 8003190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003192:	0006      	movs	r6, r0
 8003194:	000c      	movs	r4, r1
 8003196:	0015      	movs	r5, r2
 8003198:	2900      	cmp	r1, #0
 800319a:	d105      	bne.n	80031a8 <_realloc_r+0x18>
 800319c:	0011      	movs	r1, r2
 800319e:	f7ff fc51 	bl	8002a44 <_malloc_r>
 80031a2:	0004      	movs	r4, r0
 80031a4:	0020      	movs	r0, r4
 80031a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031a8:	2a00      	cmp	r2, #0
 80031aa:	d103      	bne.n	80031b4 <_realloc_r+0x24>
 80031ac:	f7ff fbde 	bl	800296c <_free_r>
 80031b0:	2400      	movs	r4, #0
 80031b2:	e7f7      	b.n	80031a4 <_realloc_r+0x14>
 80031b4:	f000 f81b 	bl	80031ee <_malloc_usable_size_r>
 80031b8:	0007      	movs	r7, r0
 80031ba:	4285      	cmp	r5, r0
 80031bc:	d802      	bhi.n	80031c4 <_realloc_r+0x34>
 80031be:	0843      	lsrs	r3, r0, #1
 80031c0:	42ab      	cmp	r3, r5
 80031c2:	d3ef      	bcc.n	80031a4 <_realloc_r+0x14>
 80031c4:	0029      	movs	r1, r5
 80031c6:	0030      	movs	r0, r6
 80031c8:	f7ff fc3c 	bl	8002a44 <_malloc_r>
 80031cc:	9001      	str	r0, [sp, #4]
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d0ee      	beq.n	80031b0 <_realloc_r+0x20>
 80031d2:	002a      	movs	r2, r5
 80031d4:	42bd      	cmp	r5, r7
 80031d6:	d900      	bls.n	80031da <_realloc_r+0x4a>
 80031d8:	003a      	movs	r2, r7
 80031da:	0021      	movs	r1, r4
 80031dc:	9801      	ldr	r0, [sp, #4]
 80031de:	f7ff ffce 	bl	800317e <memcpy>
 80031e2:	0021      	movs	r1, r4
 80031e4:	0030      	movs	r0, r6
 80031e6:	f7ff fbc1 	bl	800296c <_free_r>
 80031ea:	9c01      	ldr	r4, [sp, #4]
 80031ec:	e7da      	b.n	80031a4 <_realloc_r+0x14>

080031ee <_malloc_usable_size_r>:
 80031ee:	1f0b      	subs	r3, r1, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1f18      	subs	r0, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da01      	bge.n	80031fc <_malloc_usable_size_r+0xe>
 80031f8:	580b      	ldr	r3, [r1, r0]
 80031fa:	18c0      	adds	r0, r0, r3
 80031fc:	4770      	bx	lr
	...

08003200 <_init>:
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003206:	bc08      	pop	{r3}
 8003208:	469e      	mov	lr, r3
 800320a:	4770      	bx	lr

0800320c <_fini>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr
